syntax = "proto3";

package server.v1;

option go_package = "war-of-faith/pkg/protobuf/server/v1;serverv1";

import "google/protobuf/wrappers.proto";

message World {
  uint32 width = 1;
  uint32 height = 2;
  map<string, Building> buildings = 3; // key: building_id
  map<string, Troop> troops = 4; // key: troop_id
  map<string, Player> players = 5; // key: player_id
  map<string, World.Field> fields = 6; // key: coords
  map<string, Village> villages = 7; // key: village_coords, Affected by player pov
  map<string, Temple> temples = 8; // key: temple_coords, Affected by player pov
  repeated MovementOrder movement_orders = 9; // Affected by player pov

  message Field {
    string coords = 1;
    Kind kind = 2; // Affected by player pov
    Resources resources = 3; // Affected by player pov
    map<string, uint32> buildings = 4; // key: building_id, Affected by player pov
    map<string, uint32> troops = 5; // key: troop_id, Affected by player pov
    google.protobuf.StringValue player_id = 6; // Affected by player pov

    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    enum Kind {
      KIND_FOG = 0;
      KIND_WILD = 1;
      KIND_VILLAGE = 2;
      KIND_TEMPLE = 3;
    }
  }
}

message Building {
  string id = 1;
  string name = 2;
  repeated Resources cost = 3; // index: level-1
}

message Troop {
  string id = 1;
  string name = 2;
  Resources cost = 3;
}

message MovementOrder {
  string id = 1;
  string source_coords = 2;
  string target_coords = 3;
  map<string, uint32> troops = 4; // key: troop_id
  Resources resources = 5;
  uint32 time_left = 6;
  string player_id = 7;
  bool comeback = 8;
}

message Resources {
  uint32 gold = 1;
  uint32 time = 2;
}

message Temple {}

message Village {
  repeated BuildingUpgradeOrder building_upgrade_orders = 1;
  repeated TroopTrainingOrder troop_training_orders = 2;

  message BuildingUpgradeOrder {
    uint32 level = 1;
    string building_id = 2;
    uint32 time_left = 3;
  }

  message TroopTrainingOrder {
    string troop_id = 1;
    uint32 quantity = 2;
    uint32 time_left = 3;
  }
}

message Player {
  string id = 1;
}

/* WORLD */
// GetWorld
message GetWorldRequest {}
message GetWorldResponse {
  World world = 1;
}

// SubscribeToWorld
message SubscribeToWorldRequest {}
message SubscribeToWorldResponse {
  Patch patch = 1;

  message Patch {
    map<string, World.Field> fields = 6; // key: coords
    map<string, Village> villages = 7; // key: village_coords, Affected by player pov
    map<string, Temple> temples = 8; // key: temple_coords, Affected by player pov
    repeated MovementOrder movement_orders = 9; // Affected by player pov
  }
}

// IssueMovementOrder
message IssueMovementOrderRequest {
  string id = 1;
  string source_coords = 2;
  string target_coords = 3;
  map<string, uint32> troops = 4; // <troop_id, quantity>
  Resources resources = 5;
}
message IssueMovementOrderResponse {}

// CancelMovementOrder
message CancelMovementOrderRequest {
  string id = 1;
}
message CancelMovementOrderResponse {}

/* VILLAGES */
// IssueBuildingUpgradeOrder
message IssueBuildingUpgradeOrderRequest {
  string village_coords = 1;
  string building_id = 2;
  uint32 level = 3;
}
message IssueBuildingUpgradeOrderResponse {}

// CancelBuildingUpgradeOrder
message CancelBuildingUpgradeOrderRequest {
  string village_coords = 1;
  string building_id = 2;
  uint32 level = 3;
}
message CancelBuildingUpgradeOrderResponse {}

// IssueTrainingOrder
message IssueTrainingOrderRequest {
  string village_coords = 1;
  string troop_id = 2;
  uint32 quantity = 3;
}
message IssueTrainingOrderResponse {}

// CancelTroopTrainingOrder
message CancelTroopTrainingOrderRequest {
  string village_coords = 1;
  string troop_id = 2;
  uint32 quantity = 3;
}
message CancelTroopTrainingOrderResponse {}

service Service {
  /* WORLD */
  rpc GetWorld(GetWorldRequest) returns (GetWorldResponse);
  rpc SubscribeToWorld(SubscribeToWorldRequest) returns (stream SubscribeToWorldResponse);
  rpc IssueMovementOrder(IssueMovementOrderRequest) returns (IssueMovementOrderResponse);
  rpc CancelMovementOrder(CancelMovementOrderRequest) returns (CancelMovementOrderResponse);

  /* VILLAGES */
  rpc IssueBuildingUpgradeOrder(IssueBuildingUpgradeOrderRequest) returns (IssueBuildingUpgradeOrderResponse);
  rpc CancelBuildingUpgradeOrder(CancelBuildingUpgradeOrderRequest) returns (CancelBuildingUpgradeOrderResponse);
  rpc IssueTrainingOrder(IssueTrainingOrderRequest) returns (IssueTrainingOrderResponse);
  rpc CancelTroopTrainingOrder(CancelTroopTrainingOrderRequest) returns (CancelTroopTrainingOrderResponse);
}