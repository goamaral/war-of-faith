// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file server/v1/server.proto (package server.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message server.v1.Village
 */
export class Village extends Message<Village> {
  /**
   * @generated from field: uint32 id = 1;
   */
  id = 0;

  /**
   * @generated from field: server.v1.Resources resources = 2;
   */
  resources?: Resources;

  /**
   * @generated from field: repeated server.v1.Building buildings = 3;
   */
  buildings: Building[] = [];

  /**
   * @generated from field: repeated server.v1.Building.UpgradeOrder building_upgrade_orders = 4;
   */
  buildingUpgradeOrders: Building_UpgradeOrder[] = [];

  /**
   * <troop_kind, quantity>
   *
   * @generated from field: map<string, uint32> troop_quantity = 5;
   */
  troopQuantity: { [key: string]: number } = {};

  /**
   * @generated from field: repeated server.v1.Troop.TrainingOrder troop_training_orders = 6;
   */
  troopTrainingOrders: Troop_TrainingOrder[] = [];

  /**
   * @generated from field: uint32 player_id = 7;
   */
  playerId = 0;

  constructor(data?: PartialMessage<Village>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.v1.Village";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "resources", kind: "message", T: Resources },
    { no: 3, name: "buildings", kind: "message", T: Building, repeated: true },
    { no: 4, name: "building_upgrade_orders", kind: "message", T: Building_UpgradeOrder, repeated: true },
    { no: 5, name: "troop_quantity", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 13 /* ScalarType.UINT32 */} },
    { no: 6, name: "troop_training_orders", kind: "message", T: Troop_TrainingOrder, repeated: true },
    { no: 7, name: "player_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Village {
    return new Village().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Village {
    return new Village().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Village {
    return new Village().fromJsonString(jsonString, options);
  }

  static equals(a: Village | PlainMessage<Village> | undefined, b: Village | PlainMessage<Village> | undefined): boolean {
    return proto3.util.equals(Village, a, b);
  }
}

/**
 * @generated from message server.v1.Resources
 */
export class Resources extends Message<Resources> {
  /**
   * @generated from field: uint32 time = 1;
   */
  time = 0;

  /**
   * @generated from field: uint32 gold = 2;
   */
  gold = 0;

  constructor(data?: PartialMessage<Resources>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.v1.Resources";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "time", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "gold", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Resources {
    return new Resources().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Resources {
    return new Resources().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Resources {
    return new Resources().fromJsonString(jsonString, options);
  }

  static equals(a: Resources | PlainMessage<Resources> | undefined, b: Resources | PlainMessage<Resources> | undefined): boolean {
    return proto3.util.equals(Resources, a, b);
  }
}

/**
 * @generated from message server.v1.Building
 */
export class Building extends Message<Building> {
  /**
   * @generated from field: uint32 id = 1;
   */
  id = 0;

  /**
   * @generated from field: server.v1.Building.Kind kind = 2;
   */
  kind = Building_Kind.UNSPECIFIED;

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: uint32 level = 4;
   */
  level = 0;

  constructor(data?: PartialMessage<Building>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.v1.Building";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "kind", kind: "enum", T: proto3.getEnumType(Building_Kind) },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "level", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Building {
    return new Building().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Building {
    return new Building().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Building {
    return new Building().fromJsonString(jsonString, options);
  }

  static equals(a: Building | PlainMessage<Building> | undefined, b: Building | PlainMessage<Building> | undefined): boolean {
    return proto3.util.equals(Building, a, b);
  }
}

/**
 * @generated from enum server.v1.Building.Kind
 */
export enum Building_Kind {
  /**
   * @generated from enum value: KIND_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: KIND_HALL = 1;
   */
  HALL = 1,

  /**
   * @generated from enum value: KIND_GOLD_MINE = 2;
   */
  GOLD_MINE = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(Building_Kind)
proto3.util.setEnumType(Building_Kind, "server.v1.Building.Kind", [
  { no: 0, name: "KIND_UNSPECIFIED" },
  { no: 1, name: "KIND_HALL" },
  { no: 2, name: "KIND_GOLD_MINE" },
]);

/**
 * @generated from message server.v1.Building.UpgradeOrder
 */
export class Building_UpgradeOrder extends Message<Building_UpgradeOrder> {
  /**
   * @generated from field: uint32 id = 1;
   */
  id = 0;

  /**
   * @generated from field: uint32 level = 2;
   */
  level = 0;

  /**
   * @generated from field: uint32 time_left = 3;
   */
  timeLeft = 0;

  /**
   * @generated from field: server.v1.Resources cost = 4;
   */
  cost?: Resources;

  /**
   * @generated from field: uint32 building_id = 5;
   */
  buildingId = 0;

  constructor(data?: PartialMessage<Building_UpgradeOrder>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.v1.Building.UpgradeOrder";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "level", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "time_left", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "cost", kind: "message", T: Resources },
    { no: 5, name: "building_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Building_UpgradeOrder {
    return new Building_UpgradeOrder().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Building_UpgradeOrder {
    return new Building_UpgradeOrder().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Building_UpgradeOrder {
    return new Building_UpgradeOrder().fromJsonString(jsonString, options);
  }

  static equals(a: Building_UpgradeOrder | PlainMessage<Building_UpgradeOrder> | undefined, b: Building_UpgradeOrder | PlainMessage<Building_UpgradeOrder> | undefined): boolean {
    return proto3.util.equals(Building_UpgradeOrder, a, b);
  }
}

/**
 * @generated from message server.v1.Troop
 */
export class Troop extends Message<Troop> {
  /**
   * @generated from field: string kind = 1;
   */
  kind = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<Troop>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.v1.Troop";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Troop {
    return new Troop().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Troop {
    return new Troop().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Troop {
    return new Troop().fromJsonString(jsonString, options);
  }

  static equals(a: Troop | PlainMessage<Troop> | undefined, b: Troop | PlainMessage<Troop> | undefined): boolean {
    return proto3.util.equals(Troop, a, b);
  }
}

/**
 * @generated from message server.v1.Troop.TrainingOrder
 */
export class Troop_TrainingOrder extends Message<Troop_TrainingOrder> {
  /**
   * @generated from field: uint32 id = 1;
   */
  id = 0;

  /**
   * @generated from field: uint32 quantity = 3;
   */
  quantity = 0;

  /**
   * @generated from field: uint32 time_left = 4;
   */
  timeLeft = 0;

  /**
   * @generated from field: server.v1.Resources cost = 5;
   */
  cost?: Resources;

  /**
   * @generated from field: string troop_kind = 6;
   */
  troopKind = "";

  constructor(data?: PartialMessage<Troop_TrainingOrder>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.v1.Troop.TrainingOrder";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "quantity", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "time_left", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 5, name: "cost", kind: "message", T: Resources },
    { no: 6, name: "troop_kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Troop_TrainingOrder {
    return new Troop_TrainingOrder().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Troop_TrainingOrder {
    return new Troop_TrainingOrder().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Troop_TrainingOrder {
    return new Troop_TrainingOrder().fromJsonString(jsonString, options);
  }

  static equals(a: Troop_TrainingOrder | PlainMessage<Troop_TrainingOrder> | undefined, b: Troop_TrainingOrder | PlainMessage<Troop_TrainingOrder> | undefined): boolean {
    return proto3.util.equals(Troop_TrainingOrder, a, b);
  }
}

/**
 * @generated from message server.v1.World
 */
export class World extends Message<World> {
  /**
   * @generated from field: uint32 width = 1;
   */
  width = 0;

  /**
   * @generated from field: uint32 height = 2;
   */
  height = 0;

  /**
   * @generated from field: repeated server.v1.World.Field fields = 3;
   */
  fields: World_Field[] = [];

  constructor(data?: PartialMessage<World>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.v1.World";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "width", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "height", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "fields", kind: "message", T: World_Field, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): World {
    return new World().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): World {
    return new World().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): World {
    return new World().fromJsonString(jsonString, options);
  }

  static equals(a: World | PlainMessage<World> | undefined, b: World | PlainMessage<World> | undefined): boolean {
    return proto3.util.equals(World, a, b);
  }
}

/**
 * @generated from message server.v1.World.Field
 */
export class World_Field extends Message<World_Field> {
  /**
   * @generated from field: server.v1.Coords coords = 1;
   */
  coords?: Coords;

  /**
   * @generated from field: server.v1.World.Field.EntityKind entity_kind = 2;
   */
  entityKind = World_Field_EntityKind.UNSPECIFIED;

  /**
   * @generated from field: uint32 entity_id = 3;
   */
  entityId = 0;

  constructor(data?: PartialMessage<World_Field>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.v1.World.Field";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "coords", kind: "message", T: Coords },
    { no: 2, name: "entity_kind", kind: "enum", T: proto3.getEnumType(World_Field_EntityKind) },
    { no: 3, name: "entity_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): World_Field {
    return new World_Field().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): World_Field {
    return new World_Field().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): World_Field {
    return new World_Field().fromJsonString(jsonString, options);
  }

  static equals(a: World_Field | PlainMessage<World_Field> | undefined, b: World_Field | PlainMessage<World_Field> | undefined): boolean {
    return proto3.util.equals(World_Field, a, b);
  }
}

/**
 * @generated from enum server.v1.World.Field.EntityKind
 */
export enum World_Field_EntityKind {
  /**
   * @generated from enum value: ENTITY_KIND_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: ENTITY_KIND_VILLAGE = 1;
   */
  VILLAGE = 1,

  /**
   * @generated from enum value: ENTITY_KIND_TEMPLE = 2;
   */
  TEMPLE = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(World_Field_EntityKind)
proto3.util.setEnumType(World_Field_EntityKind, "server.v1.World.Field.EntityKind", [
  { no: 0, name: "ENTITY_KIND_UNSPECIFIED" },
  { no: 1, name: "ENTITY_KIND_VILLAGE" },
  { no: 2, name: "ENTITY_KIND_TEMPLE" },
]);

/**
 * @generated from message server.v1.Temple
 */
export class Temple extends Message<Temple> {
  /**
   * @generated from field: uint32 id = 1;
   */
  id = 0;

  constructor(data?: PartialMessage<Temple>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.v1.Temple";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Temple {
    return new Temple().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Temple {
    return new Temple().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Temple {
    return new Temple().fromJsonString(jsonString, options);
  }

  static equals(a: Temple | PlainMessage<Temple> | undefined, b: Temple | PlainMessage<Temple> | undefined): boolean {
    return proto3.util.equals(Temple, a, b);
  }
}

/**
 * @generated from message server.v1.Attack
 */
export class Attack extends Message<Attack> {
  /**
   * @generated from field: uint32 id = 1;
   */
  id = 0;

  /**
   * @generated from field: uint32 village_id = 2;
   */
  villageId = 0;

  /**
   * @generated from field: server.v1.Coords target_coords = 3;
   */
  targetCoords?: Coords;

  /**
   * <troop_kind, quantity>
   *
   * @generated from field: map<string, uint32> troop_quantity = 4;
   */
  troopQuantity: { [key: string]: number } = {};

  /**
   * @generated from field: uint32 time_left = 5;
   */
  timeLeft = 0;

  constructor(data?: PartialMessage<Attack>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.v1.Attack";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "village_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "target_coords", kind: "message", T: Coords },
    { no: 4, name: "troop_quantity", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 13 /* ScalarType.UINT32 */} },
    { no: 5, name: "time_left", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Attack {
    return new Attack().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Attack {
    return new Attack().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Attack {
    return new Attack().fromJsonString(jsonString, options);
  }

  static equals(a: Attack | PlainMessage<Attack> | undefined, b: Attack | PlainMessage<Attack> | undefined): boolean {
    return proto3.util.equals(Attack, a, b);
  }
}

/**
 * @generated from message server.v1.Coords
 */
export class Coords extends Message<Coords> {
  /**
   * @generated from field: uint32 x = 1;
   */
  x = 0;

  /**
   * @generated from field: uint32 y = 2;
   */
  y = 0;

  constructor(data?: PartialMessage<Coords>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.v1.Coords";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "x", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "y", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Coords {
    return new Coords().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Coords {
    return new Coords().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Coords {
    return new Coords().fromJsonString(jsonString, options);
  }

  static equals(a: Coords | PlainMessage<Coords> | undefined, b: Coords | PlainMessage<Coords> | undefined): boolean {
    return proto3.util.equals(Coords, a, b);
  }
}

/**
 * GetVillage
 *
 * @generated from message server.v1.GetVillageRequest
 */
export class GetVillageRequest extends Message<GetVillageRequest> {
  /**
   * @generated from field: uint32 id = 1;
   */
  id = 0;

  constructor(data?: PartialMessage<GetVillageRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.v1.GetVillageRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetVillageRequest {
    return new GetVillageRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetVillageRequest {
    return new GetVillageRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetVillageRequest {
    return new GetVillageRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetVillageRequest | PlainMessage<GetVillageRequest> | undefined, b: GetVillageRequest | PlainMessage<GetVillageRequest> | undefined): boolean {
    return proto3.util.equals(GetVillageRequest, a, b);
  }
}

/**
 * @generated from message server.v1.GetVillageResponse
 */
export class GetVillageResponse extends Message<GetVillageResponse> {
  /**
   * @generated from field: server.v1.Village Village = 1;
   */
  Village?: Village;

  constructor(data?: PartialMessage<GetVillageResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.v1.GetVillageResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Village", kind: "message", T: Village },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetVillageResponse {
    return new GetVillageResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetVillageResponse {
    return new GetVillageResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetVillageResponse {
    return new GetVillageResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetVillageResponse | PlainMessage<GetVillageResponse> | undefined, b: GetVillageResponse | PlainMessage<GetVillageResponse> | undefined): boolean {
    return proto3.util.equals(GetVillageResponse, a, b);
  }
}

/**
 * IssueBuildingUpgradeOrder
 *
 * @generated from message server.v1.IssueBuildingUpgradeOrderRequest
 */
export class IssueBuildingUpgradeOrderRequest extends Message<IssueBuildingUpgradeOrderRequest> {
  /**
   * @generated from field: uint32 building_id = 1;
   */
  buildingId = 0;

  constructor(data?: PartialMessage<IssueBuildingUpgradeOrderRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.v1.IssueBuildingUpgradeOrderRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "building_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IssueBuildingUpgradeOrderRequest {
    return new IssueBuildingUpgradeOrderRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IssueBuildingUpgradeOrderRequest {
    return new IssueBuildingUpgradeOrderRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IssueBuildingUpgradeOrderRequest {
    return new IssueBuildingUpgradeOrderRequest().fromJsonString(jsonString, options);
  }

  static equals(a: IssueBuildingUpgradeOrderRequest | PlainMessage<IssueBuildingUpgradeOrderRequest> | undefined, b: IssueBuildingUpgradeOrderRequest | PlainMessage<IssueBuildingUpgradeOrderRequest> | undefined): boolean {
    return proto3.util.equals(IssueBuildingUpgradeOrderRequest, a, b);
  }
}

/**
 * @generated from message server.v1.IssueBuildingUpgradeOrderResponse
 */
export class IssueBuildingUpgradeOrderResponse extends Message<IssueBuildingUpgradeOrderResponse> {
  /**
   * @generated from field: server.v1.Building.UpgradeOrder order = 1;
   */
  order?: Building_UpgradeOrder;

  constructor(data?: PartialMessage<IssueBuildingUpgradeOrderResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.v1.IssueBuildingUpgradeOrderResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "order", kind: "message", T: Building_UpgradeOrder },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IssueBuildingUpgradeOrderResponse {
    return new IssueBuildingUpgradeOrderResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IssueBuildingUpgradeOrderResponse {
    return new IssueBuildingUpgradeOrderResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IssueBuildingUpgradeOrderResponse {
    return new IssueBuildingUpgradeOrderResponse().fromJsonString(jsonString, options);
  }

  static equals(a: IssueBuildingUpgradeOrderResponse | PlainMessage<IssueBuildingUpgradeOrderResponse> | undefined, b: IssueBuildingUpgradeOrderResponse | PlainMessage<IssueBuildingUpgradeOrderResponse> | undefined): boolean {
    return proto3.util.equals(IssueBuildingUpgradeOrderResponse, a, b);
  }
}

/**
 * CancelBuildingUpgradeOrder
 *
 * @generated from message server.v1.CancelBuildingUpgradeOrderRequest
 */
export class CancelBuildingUpgradeOrderRequest extends Message<CancelBuildingUpgradeOrderRequest> {
  /**
   * @generated from field: uint32 id = 1;
   */
  id = 0;

  constructor(data?: PartialMessage<CancelBuildingUpgradeOrderRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.v1.CancelBuildingUpgradeOrderRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CancelBuildingUpgradeOrderRequest {
    return new CancelBuildingUpgradeOrderRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CancelBuildingUpgradeOrderRequest {
    return new CancelBuildingUpgradeOrderRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CancelBuildingUpgradeOrderRequest {
    return new CancelBuildingUpgradeOrderRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CancelBuildingUpgradeOrderRequest | PlainMessage<CancelBuildingUpgradeOrderRequest> | undefined, b: CancelBuildingUpgradeOrderRequest | PlainMessage<CancelBuildingUpgradeOrderRequest> | undefined): boolean {
    return proto3.util.equals(CancelBuildingUpgradeOrderRequest, a, b);
  }
}

/**
 * @generated from message server.v1.CancelBuildingUpgradeOrderResponse
 */
export class CancelBuildingUpgradeOrderResponse extends Message<CancelBuildingUpgradeOrderResponse> {
  constructor(data?: PartialMessage<CancelBuildingUpgradeOrderResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.v1.CancelBuildingUpgradeOrderResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CancelBuildingUpgradeOrderResponse {
    return new CancelBuildingUpgradeOrderResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CancelBuildingUpgradeOrderResponse {
    return new CancelBuildingUpgradeOrderResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CancelBuildingUpgradeOrderResponse {
    return new CancelBuildingUpgradeOrderResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CancelBuildingUpgradeOrderResponse | PlainMessage<CancelBuildingUpgradeOrderResponse> | undefined, b: CancelBuildingUpgradeOrderResponse | PlainMessage<CancelBuildingUpgradeOrderResponse> | undefined): boolean {
    return proto3.util.equals(CancelBuildingUpgradeOrderResponse, a, b);
  }
}

/**
 * IssueTroopTrainingOrder
 *
 * @generated from message server.v1.IssueTroopTrainingOrderRequest
 */
export class IssueTroopTrainingOrderRequest extends Message<IssueTroopTrainingOrderRequest> {
  /**
   * @generated from field: string troop_kind = 1;
   */
  troopKind = "";

  /**
   * @generated from field: uint32 quantity = 2;
   */
  quantity = 0;

  /**
   * @generated from field: uint32 village_id = 3;
   */
  villageId = 0;

  constructor(data?: PartialMessage<IssueTroopTrainingOrderRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.v1.IssueTroopTrainingOrderRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "troop_kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "quantity", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "village_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IssueTroopTrainingOrderRequest {
    return new IssueTroopTrainingOrderRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IssueTroopTrainingOrderRequest {
    return new IssueTroopTrainingOrderRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IssueTroopTrainingOrderRequest {
    return new IssueTroopTrainingOrderRequest().fromJsonString(jsonString, options);
  }

  static equals(a: IssueTroopTrainingOrderRequest | PlainMessage<IssueTroopTrainingOrderRequest> | undefined, b: IssueTroopTrainingOrderRequest | PlainMessage<IssueTroopTrainingOrderRequest> | undefined): boolean {
    return proto3.util.equals(IssueTroopTrainingOrderRequest, a, b);
  }
}

/**
 * @generated from message server.v1.IssueTroopTrainingOrderResponse
 */
export class IssueTroopTrainingOrderResponse extends Message<IssueTroopTrainingOrderResponse> {
  /**
   * @generated from field: server.v1.Troop.TrainingOrder order = 1;
   */
  order?: Troop_TrainingOrder;

  constructor(data?: PartialMessage<IssueTroopTrainingOrderResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.v1.IssueTroopTrainingOrderResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "order", kind: "message", T: Troop_TrainingOrder },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IssueTroopTrainingOrderResponse {
    return new IssueTroopTrainingOrderResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IssueTroopTrainingOrderResponse {
    return new IssueTroopTrainingOrderResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IssueTroopTrainingOrderResponse {
    return new IssueTroopTrainingOrderResponse().fromJsonString(jsonString, options);
  }

  static equals(a: IssueTroopTrainingOrderResponse | PlainMessage<IssueTroopTrainingOrderResponse> | undefined, b: IssueTroopTrainingOrderResponse | PlainMessage<IssueTroopTrainingOrderResponse> | undefined): boolean {
    return proto3.util.equals(IssueTroopTrainingOrderResponse, a, b);
  }
}

/**
 * CancelTroopTrainingOrder
 *
 * @generated from message server.v1.CancelTroopTrainingOrderRequest
 */
export class CancelTroopTrainingOrderRequest extends Message<CancelTroopTrainingOrderRequest> {
  /**
   * @generated from field: uint32 id = 1;
   */
  id = 0;

  constructor(data?: PartialMessage<CancelTroopTrainingOrderRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.v1.CancelTroopTrainingOrderRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CancelTroopTrainingOrderRequest {
    return new CancelTroopTrainingOrderRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CancelTroopTrainingOrderRequest {
    return new CancelTroopTrainingOrderRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CancelTroopTrainingOrderRequest {
    return new CancelTroopTrainingOrderRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CancelTroopTrainingOrderRequest | PlainMessage<CancelTroopTrainingOrderRequest> | undefined, b: CancelTroopTrainingOrderRequest | PlainMessage<CancelTroopTrainingOrderRequest> | undefined): boolean {
    return proto3.util.equals(CancelTroopTrainingOrderRequest, a, b);
  }
}

/**
 * @generated from message server.v1.CancelTroopTrainingOrderResponse
 */
export class CancelTroopTrainingOrderResponse extends Message<CancelTroopTrainingOrderResponse> {
  constructor(data?: PartialMessage<CancelTroopTrainingOrderResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.v1.CancelTroopTrainingOrderResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CancelTroopTrainingOrderResponse {
    return new CancelTroopTrainingOrderResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CancelTroopTrainingOrderResponse {
    return new CancelTroopTrainingOrderResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CancelTroopTrainingOrderResponse {
    return new CancelTroopTrainingOrderResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CancelTroopTrainingOrderResponse | PlainMessage<CancelTroopTrainingOrderResponse> | undefined, b: CancelTroopTrainingOrderResponse | PlainMessage<CancelTroopTrainingOrderResponse> | undefined): boolean {
    return proto3.util.equals(CancelTroopTrainingOrderResponse, a, b);
  }
}

/**
 * GetTroops
 *
 * @generated from message server.v1.GetTroopsRequest
 */
export class GetTroopsRequest extends Message<GetTroopsRequest> {
  constructor(data?: PartialMessage<GetTroopsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.v1.GetTroopsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTroopsRequest {
    return new GetTroopsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTroopsRequest {
    return new GetTroopsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTroopsRequest {
    return new GetTroopsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetTroopsRequest | PlainMessage<GetTroopsRequest> | undefined, b: GetTroopsRequest | PlainMessage<GetTroopsRequest> | undefined): boolean {
    return proto3.util.equals(GetTroopsRequest, a, b);
  }
}

/**
 * @generated from message server.v1.GetTroopsResponse
 */
export class GetTroopsResponse extends Message<GetTroopsResponse> {
  /**
   * @generated from field: repeated server.v1.Troop troops = 1;
   */
  troops: Troop[] = [];

  constructor(data?: PartialMessage<GetTroopsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.v1.GetTroopsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "troops", kind: "message", T: Troop, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTroopsResponse {
    return new GetTroopsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTroopsResponse {
    return new GetTroopsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTroopsResponse {
    return new GetTroopsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetTroopsResponse | PlainMessage<GetTroopsResponse> | undefined, b: GetTroopsResponse | PlainMessage<GetTroopsResponse> | undefined): boolean {
    return proto3.util.equals(GetTroopsResponse, a, b);
  }
}

/**
 * GetWorld
 *
 * @generated from message server.v1.GetWorldRequest
 */
export class GetWorldRequest extends Message<GetWorldRequest> {
  /**
   * @generated from field: bool load_fields = 1;
   */
  loadFields = false;

  constructor(data?: PartialMessage<GetWorldRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.v1.GetWorldRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "load_fields", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetWorldRequest {
    return new GetWorldRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetWorldRequest {
    return new GetWorldRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetWorldRequest {
    return new GetWorldRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetWorldRequest | PlainMessage<GetWorldRequest> | undefined, b: GetWorldRequest | PlainMessage<GetWorldRequest> | undefined): boolean {
    return proto3.util.equals(GetWorldRequest, a, b);
  }
}

/**
 * @generated from message server.v1.GetWorldResponse
 */
export class GetWorldResponse extends Message<GetWorldResponse> {
  /**
   * @generated from field: server.v1.World world = 1;
   */
  world?: World;

  constructor(data?: PartialMessage<GetWorldResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.v1.GetWorldResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "world", kind: "message", T: World },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetWorldResponse {
    return new GetWorldResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetWorldResponse {
    return new GetWorldResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetWorldResponse {
    return new GetWorldResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetWorldResponse | PlainMessage<GetWorldResponse> | undefined, b: GetWorldResponse | PlainMessage<GetWorldResponse> | undefined): boolean {
    return proto3.util.equals(GetWorldResponse, a, b);
  }
}

/**
 * Attack
 *
 * @generated from message server.v1.AttackRequest
 */
export class AttackRequest extends Message<AttackRequest> {
  /**
   * @generated from field: server.v1.Attack attack = 1;
   */
  attack?: Attack;

  constructor(data?: PartialMessage<AttackRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.v1.AttackRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "attack", kind: "message", T: Attack },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AttackRequest {
    return new AttackRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AttackRequest {
    return new AttackRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AttackRequest {
    return new AttackRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AttackRequest | PlainMessage<AttackRequest> | undefined, b: AttackRequest | PlainMessage<AttackRequest> | undefined): boolean {
    return proto3.util.equals(AttackRequest, a, b);
  }
}

/**
 * @generated from message server.v1.AttackResponse
 */
export class AttackResponse extends Message<AttackResponse> {
  /**
   * @generated from field: server.v1.Attack attack = 1;
   */
  attack?: Attack;

  constructor(data?: PartialMessage<AttackResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.v1.AttackResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "attack", kind: "message", T: Attack },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AttackResponse {
    return new AttackResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AttackResponse {
    return new AttackResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AttackResponse {
    return new AttackResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AttackResponse | PlainMessage<AttackResponse> | undefined, b: AttackResponse | PlainMessage<AttackResponse> | undefined): boolean {
    return proto3.util.equals(AttackResponse, a, b);
  }
}

