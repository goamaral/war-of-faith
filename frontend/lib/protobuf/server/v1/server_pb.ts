// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file server/v1/server.proto (package server.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, StringValue } from "@bufbuild/protobuf";

/**
 * @generated from message server.v1.World
 */
export class World extends Message<World> {
  /**
   * @generated from field: uint32 width = 1;
   */
  width = 0;

  /**
   * @generated from field: uint32 height = 2;
   */
  height = 0;

  /**
   * key: building_id
   *
   * @generated from field: map<string, server.v1.Building> buildings = 3;
   */
  buildings: { [key: string]: Building } = {};

  /**
   * key: troop_id
   *
   * @generated from field: map<string, server.v1.Troop> troops = 4;
   */
  troops: { [key: string]: Troop } = {};

  /**
   * key: player_id
   *
   * @generated from field: map<string, server.v1.Player> players = 5;
   */
  players: { [key: string]: Player } = {};

  /**
   * key: coords
   *
   * @generated from field: map<string, server.v1.World.Field> fields = 6;
   */
  fields: { [key: string]: World_Field } = {};

  /**
   * key: village_coords, Affected by player pov
   *
   * @generated from field: map<string, server.v1.Village> villages = 7;
   */
  villages: { [key: string]: Village } = {};

  /**
   * key: temple_coords, Affected by player pov
   *
   * @generated from field: map<string, server.v1.Temple> temples = 8;
   */
  temples: { [key: string]: Temple } = {};

  /**
   * key: attack_id, Affected by player pov
   *
   * @generated from field: map<string, server.v1.Attack> attacks = 9;
   */
  attacks: { [key: string]: Attack } = {};

  constructor(data?: PartialMessage<World>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.v1.World";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "width", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "height", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "buildings", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Building} },
    { no: 4, name: "troops", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Troop} },
    { no: 5, name: "players", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Player} },
    { no: 6, name: "fields", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: World_Field} },
    { no: 7, name: "villages", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Village} },
    { no: 8, name: "temples", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Temple} },
    { no: 9, name: "attacks", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Attack} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): World {
    return new World().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): World {
    return new World().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): World {
    return new World().fromJsonString(jsonString, options);
  }

  static equals(a: World | PlainMessage<World> | undefined, b: World | PlainMessage<World> | undefined): boolean {
    return proto3.util.equals(World, a, b);
  }
}

/**
 * @generated from message server.v1.World.Field
 */
export class World_Field extends Message<World_Field> {
  /**
   * @generated from field: string coords = 1;
   */
  coords = "";

  /**
   * Affected by player pov
   *
   * @generated from field: server.v1.World.Field.Kind kind = 2;
   */
  kind = World_Field_Kind.FOG;

  constructor(data?: PartialMessage<World_Field>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.v1.World.Field";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "coords", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "kind", kind: "enum", T: proto3.getEnumType(World_Field_Kind) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): World_Field {
    return new World_Field().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): World_Field {
    return new World_Field().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): World_Field {
    return new World_Field().fromJsonString(jsonString, options);
  }

  static equals(a: World_Field | PlainMessage<World_Field> | undefined, b: World_Field | PlainMessage<World_Field> | undefined): boolean {
    return proto3.util.equals(World_Field, a, b);
  }
}

/**
 * @generated from enum server.v1.World.Field.Kind
 */
export enum World_Field_Kind {
  /**
   * @generated from enum value: KIND_FOG = 0;
   */
  FOG = 0,

  /**
   * @generated from enum value: KIND_WILD = 1;
   */
  WILD = 1,

  /**
   * @generated from enum value: KIND_VILLAGE = 2;
   */
  VILLAGE = 2,

  /**
   * @generated from enum value: KIND_TEMPLE = 3;
   */
  TEMPLE = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(World_Field_Kind)
proto3.util.setEnumType(World_Field_Kind, "server.v1.World.Field.Kind", [
  { no: 0, name: "KIND_FOG" },
  { no: 1, name: "KIND_WILD" },
  { no: 2, name: "KIND_VILLAGE" },
  { no: 3, name: "KIND_TEMPLE" },
]);

/**
 * @generated from message server.v1.Building
 */
export class Building extends Message<Building> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<Building>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.v1.Building";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Building {
    return new Building().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Building {
    return new Building().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Building {
    return new Building().fromJsonString(jsonString, options);
  }

  static equals(a: Building | PlainMessage<Building> | undefined, b: Building | PlainMessage<Building> | undefined): boolean {
    return proto3.util.equals(Building, a, b);
  }
}

/**
 * @generated from message server.v1.Troop
 */
export class Troop extends Message<Troop> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<Troop>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.v1.Troop";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Troop {
    return new Troop().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Troop {
    return new Troop().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Troop {
    return new Troop().fromJsonString(jsonString, options);
  }

  static equals(a: Troop | PlainMessage<Troop> | undefined, b: Troop | PlainMessage<Troop> | undefined): boolean {
    return proto3.util.equals(Troop, a, b);
  }
}

/**
 * @generated from message server.v1.Attack
 */
export class Attack extends Message<Attack> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string source_coords = 2;
   */
  sourceCoords = "";

  /**
   * @generated from field: string target_coords = 3;
   */
  targetCoords = "";

  /**
   * key: troop_id
   *
   * @generated from field: map<string, uint32> troops = 4;
   */
  troops: { [key: string]: number } = {};

  /**
   * @generated from field: uint32 time_left = 5;
   */
  timeLeft = 0;

  constructor(data?: PartialMessage<Attack>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.v1.Attack";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "source_coords", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "target_coords", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "troops", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 13 /* ScalarType.UINT32 */} },
    { no: 5, name: "time_left", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Attack {
    return new Attack().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Attack {
    return new Attack().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Attack {
    return new Attack().fromJsonString(jsonString, options);
  }

  static equals(a: Attack | PlainMessage<Attack> | undefined, b: Attack | PlainMessage<Attack> | undefined): boolean {
    return proto3.util.equals(Attack, a, b);
  }
}

/**
 * @generated from message server.v1.Resources
 */
export class Resources extends Message<Resources> {
  /**
   * @generated from field: uint32 gold = 1;
   */
  gold = 0;

  constructor(data?: PartialMessage<Resources>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.v1.Resources";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "gold", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Resources {
    return new Resources().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Resources {
    return new Resources().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Resources {
    return new Resources().fromJsonString(jsonString, options);
  }

  static equals(a: Resources | PlainMessage<Resources> | undefined, b: Resources | PlainMessage<Resources> | undefined): boolean {
    return proto3.util.equals(Resources, a, b);
  }
}

/**
 * @generated from message server.v1.Temple
 */
export class Temple extends Message<Temple> {
  /**
   * @generated from field: string coords = 1;
   */
  coords = "";

  /**
   * @generated from field: server.v1.Resources resources = 2;
   */
  resources?: Resources;

  /**
   * @generated from field: google.protobuf.StringValue player_id = 3;
   */
  playerId?: string;

  constructor(data?: PartialMessage<Temple>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.v1.Temple";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "coords", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "resources", kind: "message", T: Resources },
    { no: 3, name: "player_id", kind: "message", T: StringValue },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Temple {
    return new Temple().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Temple {
    return new Temple().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Temple {
    return new Temple().fromJsonString(jsonString, options);
  }

  static equals(a: Temple | PlainMessage<Temple> | undefined, b: Temple | PlainMessage<Temple> | undefined): boolean {
    return proto3.util.equals(Temple, a, b);
  }
}

/**
 * @generated from message server.v1.Village
 */
export class Village extends Message<Village> {
  /**
   * @generated from field: string coords = 1;
   */
  coords = "";

  /**
   * @generated from field: string player_id = 2;
   */
  playerId = "";

  /**
   * @generated from field: server.v1.Resources resources = 3;
   */
  resources?: Resources;

  /**
   * key: building_id
   *
   * @generated from field: map<string, uint32> buildings = 4;
   */
  buildings: { [key: string]: number } = {};

  /**
   * key: troop_id
   *
   * @generated from field: map<string, uint32> troops = 5;
   */
  troops: { [key: string]: number } = {};

  /**
   * @generated from field: repeated server.v1.Village.BuildingUpgradeOrder building_upgrade_orders = 6;
   */
  buildingUpgradeOrders: Village_BuildingUpgradeOrder[] = [];

  /**
   * @generated from field: repeated server.v1.Village.TroopTrainingOrder troop_training_orders = 7;
   */
  troopTrainingOrders: Village_TroopTrainingOrder[] = [];

  /**
   * @generated from field: repeated server.v1.Village.ResourceTransferOrder resource_transfer_orders = 8;
   */
  resourceTransferOrders: Village_ResourceTransferOrder[] = [];

  constructor(data?: PartialMessage<Village>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.v1.Village";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "coords", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "player_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "resources", kind: "message", T: Resources },
    { no: 4, name: "buildings", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 13 /* ScalarType.UINT32 */} },
    { no: 5, name: "troops", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 13 /* ScalarType.UINT32 */} },
    { no: 6, name: "building_upgrade_orders", kind: "message", T: Village_BuildingUpgradeOrder, repeated: true },
    { no: 7, name: "troop_training_orders", kind: "message", T: Village_TroopTrainingOrder, repeated: true },
    { no: 8, name: "resource_transfer_orders", kind: "message", T: Village_ResourceTransferOrder, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Village {
    return new Village().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Village {
    return new Village().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Village {
    return new Village().fromJsonString(jsonString, options);
  }

  static equals(a: Village | PlainMessage<Village> | undefined, b: Village | PlainMessage<Village> | undefined): boolean {
    return proto3.util.equals(Village, a, b);
  }
}

/**
 * @generated from message server.v1.Village.BuildingUpgradeOrder
 */
export class Village_BuildingUpgradeOrder extends Message<Village_BuildingUpgradeOrder> {
  /**
   * @generated from field: string building_id = 1;
   */
  buildingId = "";

  /**
   * @generated from field: uint32 time_left = 2;
   */
  timeLeft = 0;

  constructor(data?: PartialMessage<Village_BuildingUpgradeOrder>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.v1.Village.BuildingUpgradeOrder";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "building_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "time_left", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Village_BuildingUpgradeOrder {
    return new Village_BuildingUpgradeOrder().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Village_BuildingUpgradeOrder {
    return new Village_BuildingUpgradeOrder().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Village_BuildingUpgradeOrder {
    return new Village_BuildingUpgradeOrder().fromJsonString(jsonString, options);
  }

  static equals(a: Village_BuildingUpgradeOrder | PlainMessage<Village_BuildingUpgradeOrder> | undefined, b: Village_BuildingUpgradeOrder | PlainMessage<Village_BuildingUpgradeOrder> | undefined): boolean {
    return proto3.util.equals(Village_BuildingUpgradeOrder, a, b);
  }
}

/**
 * @generated from message server.v1.Village.TroopTrainingOrder
 */
export class Village_TroopTrainingOrder extends Message<Village_TroopTrainingOrder> {
  /**
   * @generated from field: string troop_id = 1;
   */
  troopId = "";

  /**
   * @generated from field: uint32 quantity = 2;
   */
  quantity = 0;

  /**
   * @generated from field: uint32 time_left = 3;
   */
  timeLeft = 0;

  constructor(data?: PartialMessage<Village_TroopTrainingOrder>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.v1.Village.TroopTrainingOrder";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "troop_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "quantity", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "time_left", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Village_TroopTrainingOrder {
    return new Village_TroopTrainingOrder().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Village_TroopTrainingOrder {
    return new Village_TroopTrainingOrder().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Village_TroopTrainingOrder {
    return new Village_TroopTrainingOrder().fromJsonString(jsonString, options);
  }

  static equals(a: Village_TroopTrainingOrder | PlainMessage<Village_TroopTrainingOrder> | undefined, b: Village_TroopTrainingOrder | PlainMessage<Village_TroopTrainingOrder> | undefined): boolean {
    return proto3.util.equals(Village_TroopTrainingOrder, a, b);
  }
}

/**
 * @generated from message server.v1.Village.ResourceTransferOrder
 */
export class Village_ResourceTransferOrder extends Message<Village_ResourceTransferOrder> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: server.v1.Resources resources = 2;
   */
  resources?: Resources;

  /**
   * @generated from field: string target_coords = 3;
   */
  targetCoords = "";

  /**
   * @generated from field: uint32 time_left = 4;
   */
  timeLeft = 0;

  constructor(data?: PartialMessage<Village_ResourceTransferOrder>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.v1.Village.ResourceTransferOrder";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "resources", kind: "message", T: Resources },
    { no: 3, name: "target_coords", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "time_left", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Village_ResourceTransferOrder {
    return new Village_ResourceTransferOrder().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Village_ResourceTransferOrder {
    return new Village_ResourceTransferOrder().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Village_ResourceTransferOrder {
    return new Village_ResourceTransferOrder().fromJsonString(jsonString, options);
  }

  static equals(a: Village_ResourceTransferOrder | PlainMessage<Village_ResourceTransferOrder> | undefined, b: Village_ResourceTransferOrder | PlainMessage<Village_ResourceTransferOrder> | undefined): boolean {
    return proto3.util.equals(Village_ResourceTransferOrder, a, b);
  }
}

/**
 * @generated from message server.v1.Player
 */
export class Player extends Message<Player> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<Player>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.v1.Player";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Player {
    return new Player().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Player {
    return new Player().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Player {
    return new Player().fromJsonString(jsonString, options);
  }

  static equals(a: Player | PlainMessage<Player> | undefined, b: Player | PlainMessage<Player> | undefined): boolean {
    return proto3.util.equals(Player, a, b);
  }
}

/**
 * GetWorld
 *
 * @generated from message server.v1.GetWorldRequest
 */
export class GetWorldRequest extends Message<GetWorldRequest> {
  constructor(data?: PartialMessage<GetWorldRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.v1.GetWorldRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetWorldRequest {
    return new GetWorldRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetWorldRequest {
    return new GetWorldRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetWorldRequest {
    return new GetWorldRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetWorldRequest | PlainMessage<GetWorldRequest> | undefined, b: GetWorldRequest | PlainMessage<GetWorldRequest> | undefined): boolean {
    return proto3.util.equals(GetWorldRequest, a, b);
  }
}

/**
 * @generated from message server.v1.GetWorldResponse
 */
export class GetWorldResponse extends Message<GetWorldResponse> {
  /**
   * @generated from field: server.v1.World world = 1;
   */
  world?: World;

  constructor(data?: PartialMessage<GetWorldResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.v1.GetWorldResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "world", kind: "message", T: World },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetWorldResponse {
    return new GetWorldResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetWorldResponse {
    return new GetWorldResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetWorldResponse {
    return new GetWorldResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetWorldResponse | PlainMessage<GetWorldResponse> | undefined, b: GetWorldResponse | PlainMessage<GetWorldResponse> | undefined): boolean {
    return proto3.util.equals(GetWorldResponse, a, b);
  }
}

/**
 * SubscribeToWorld
 *
 * @generated from message server.v1.SubscribeToWorldRequest
 */
export class SubscribeToWorldRequest extends Message<SubscribeToWorldRequest> {
  constructor(data?: PartialMessage<SubscribeToWorldRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.v1.SubscribeToWorldRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubscribeToWorldRequest {
    return new SubscribeToWorldRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubscribeToWorldRequest {
    return new SubscribeToWorldRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubscribeToWorldRequest {
    return new SubscribeToWorldRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SubscribeToWorldRequest | PlainMessage<SubscribeToWorldRequest> | undefined, b: SubscribeToWorldRequest | PlainMessage<SubscribeToWorldRequest> | undefined): boolean {
    return proto3.util.equals(SubscribeToWorldRequest, a, b);
  }
}

/**
 * @generated from message server.v1.SubscribeToWorldResponse
 */
export class SubscribeToWorldResponse extends Message<SubscribeToWorldResponse> {
  /**
   * @generated from field: server.v1.SubscribeToWorldResponse.Patch patch = 1;
   */
  patch?: SubscribeToWorldResponse_Patch;

  constructor(data?: PartialMessage<SubscribeToWorldResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.v1.SubscribeToWorldResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "patch", kind: "message", T: SubscribeToWorldResponse_Patch },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubscribeToWorldResponse {
    return new SubscribeToWorldResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubscribeToWorldResponse {
    return new SubscribeToWorldResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubscribeToWorldResponse {
    return new SubscribeToWorldResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SubscribeToWorldResponse | PlainMessage<SubscribeToWorldResponse> | undefined, b: SubscribeToWorldResponse | PlainMessage<SubscribeToWorldResponse> | undefined): boolean {
    return proto3.util.equals(SubscribeToWorldResponse, a, b);
  }
}

/**
 * @generated from message server.v1.SubscribeToWorldResponse.Patch
 */
export class SubscribeToWorldResponse_Patch extends Message<SubscribeToWorldResponse_Patch> {
  /**
   * key: coords
   *
   * @generated from field: map<string, server.v1.World.Field> fields = 6;
   */
  fields: { [key: string]: World_Field } = {};

  /**
   * key: village_coords, Affected by player pov
   *
   * @generated from field: map<string, server.v1.Village> villages = 7;
   */
  villages: { [key: string]: Village } = {};

  /**
   * key: temple_coords, Affected by player pov
   *
   * @generated from field: map<string, server.v1.Temple> temples = 8;
   */
  temples: { [key: string]: Temple } = {};

  /**
   * key: attack_id, Affected by player pov
   *
   * @generated from field: map<string, server.v1.Attack> attacks = 9;
   */
  attacks: { [key: string]: Attack } = {};

  constructor(data?: PartialMessage<SubscribeToWorldResponse_Patch>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.v1.SubscribeToWorldResponse.Patch";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 6, name: "fields", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: World_Field} },
    { no: 7, name: "villages", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Village} },
    { no: 8, name: "temples", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Temple} },
    { no: 9, name: "attacks", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Attack} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubscribeToWorldResponse_Patch {
    return new SubscribeToWorldResponse_Patch().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubscribeToWorldResponse_Patch {
    return new SubscribeToWorldResponse_Patch().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubscribeToWorldResponse_Patch {
    return new SubscribeToWorldResponse_Patch().fromJsonString(jsonString, options);
  }

  static equals(a: SubscribeToWorldResponse_Patch | PlainMessage<SubscribeToWorldResponse_Patch> | undefined, b: SubscribeToWorldResponse_Patch | PlainMessage<SubscribeToWorldResponse_Patch> | undefined): boolean {
    return proto3.util.equals(SubscribeToWorldResponse_Patch, a, b);
  }
}

/**
 * IssueAttack
 *
 * @generated from message server.v1.IssueAttackRequest
 */
export class IssueAttackRequest extends Message<IssueAttackRequest> {
  /**
   * @generated from field: string source_coords = 1;
   */
  sourceCoords = "";

  /**
   * @generated from field: string target_coords = 2;
   */
  targetCoords = "";

  /**
   * <troop_id, quantity>
   *
   * @generated from field: map<string, uint32> troops = 3;
   */
  troops: { [key: string]: number } = {};

  constructor(data?: PartialMessage<IssueAttackRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.v1.IssueAttackRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "source_coords", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "target_coords", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "troops", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 13 /* ScalarType.UINT32 */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IssueAttackRequest {
    return new IssueAttackRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IssueAttackRequest {
    return new IssueAttackRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IssueAttackRequest {
    return new IssueAttackRequest().fromJsonString(jsonString, options);
  }

  static equals(a: IssueAttackRequest | PlainMessage<IssueAttackRequest> | undefined, b: IssueAttackRequest | PlainMessage<IssueAttackRequest> | undefined): boolean {
    return proto3.util.equals(IssueAttackRequest, a, b);
  }
}

/**
 * @generated from message server.v1.IssueAttackResponse
 */
export class IssueAttackResponse extends Message<IssueAttackResponse> {
  /**
   * @generated from field: server.v1.Attack attack = 1;
   */
  attack?: Attack;

  constructor(data?: PartialMessage<IssueAttackResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.v1.IssueAttackResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "attack", kind: "message", T: Attack },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IssueAttackResponse {
    return new IssueAttackResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IssueAttackResponse {
    return new IssueAttackResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IssueAttackResponse {
    return new IssueAttackResponse().fromJsonString(jsonString, options);
  }

  static equals(a: IssueAttackResponse | PlainMessage<IssueAttackResponse> | undefined, b: IssueAttackResponse | PlainMessage<IssueAttackResponse> | undefined): boolean {
    return proto3.util.equals(IssueAttackResponse, a, b);
  }
}

/**
 * CancelAttack
 *
 * @generated from message server.v1.CancelAttackRequest
 */
export class CancelAttackRequest extends Message<CancelAttackRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<CancelAttackRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.v1.CancelAttackRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CancelAttackRequest {
    return new CancelAttackRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CancelAttackRequest {
    return new CancelAttackRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CancelAttackRequest {
    return new CancelAttackRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CancelAttackRequest | PlainMessage<CancelAttackRequest> | undefined, b: CancelAttackRequest | PlainMessage<CancelAttackRequest> | undefined): boolean {
    return proto3.util.equals(CancelAttackRequest, a, b);
  }
}

/**
 * @generated from message server.v1.CancelAttackResponse
 */
export class CancelAttackResponse extends Message<CancelAttackResponse> {
  constructor(data?: PartialMessage<CancelAttackResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.v1.CancelAttackResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CancelAttackResponse {
    return new CancelAttackResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CancelAttackResponse {
    return new CancelAttackResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CancelAttackResponse {
    return new CancelAttackResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CancelAttackResponse | PlainMessage<CancelAttackResponse> | undefined, b: CancelAttackResponse | PlainMessage<CancelAttackResponse> | undefined): boolean {
    return proto3.util.equals(CancelAttackResponse, a, b);
  }
}

/**
 * IssueBuildingUpgradeOrder
 *
 * @generated from message server.v1.IssueBuildingUpgradeOrderRequest
 */
export class IssueBuildingUpgradeOrderRequest extends Message<IssueBuildingUpgradeOrderRequest> {
  /**
   * @generated from field: string building_id = 1;
   */
  buildingId = "";

  /**
   * @generated from field: string village_id = 2;
   */
  villageId = "";

  constructor(data?: PartialMessage<IssueBuildingUpgradeOrderRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.v1.IssueBuildingUpgradeOrderRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "building_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "village_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IssueBuildingUpgradeOrderRequest {
    return new IssueBuildingUpgradeOrderRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IssueBuildingUpgradeOrderRequest {
    return new IssueBuildingUpgradeOrderRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IssueBuildingUpgradeOrderRequest {
    return new IssueBuildingUpgradeOrderRequest().fromJsonString(jsonString, options);
  }

  static equals(a: IssueBuildingUpgradeOrderRequest | PlainMessage<IssueBuildingUpgradeOrderRequest> | undefined, b: IssueBuildingUpgradeOrderRequest | PlainMessage<IssueBuildingUpgradeOrderRequest> | undefined): boolean {
    return proto3.util.equals(IssueBuildingUpgradeOrderRequest, a, b);
  }
}

/**
 * @generated from message server.v1.IssueBuildingUpgradeOrderResponse
 */
export class IssueBuildingUpgradeOrderResponse extends Message<IssueBuildingUpgradeOrderResponse> {
  /**
   * @generated from field: server.v1.Village.BuildingUpgradeOrder order = 1;
   */
  order?: Village_BuildingUpgradeOrder;

  constructor(data?: PartialMessage<IssueBuildingUpgradeOrderResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.v1.IssueBuildingUpgradeOrderResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "order", kind: "message", T: Village_BuildingUpgradeOrder },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IssueBuildingUpgradeOrderResponse {
    return new IssueBuildingUpgradeOrderResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IssueBuildingUpgradeOrderResponse {
    return new IssueBuildingUpgradeOrderResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IssueBuildingUpgradeOrderResponse {
    return new IssueBuildingUpgradeOrderResponse().fromJsonString(jsonString, options);
  }

  static equals(a: IssueBuildingUpgradeOrderResponse | PlainMessage<IssueBuildingUpgradeOrderResponse> | undefined, b: IssueBuildingUpgradeOrderResponse | PlainMessage<IssueBuildingUpgradeOrderResponse> | undefined): boolean {
    return proto3.util.equals(IssueBuildingUpgradeOrderResponse, a, b);
  }
}

/**
 * CancelBuildingUpgradeOrder
 *
 * @generated from message server.v1.CancelBuildingUpgradeOrderRequest
 */
export class CancelBuildingUpgradeOrderRequest extends Message<CancelBuildingUpgradeOrderRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<CancelBuildingUpgradeOrderRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.v1.CancelBuildingUpgradeOrderRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CancelBuildingUpgradeOrderRequest {
    return new CancelBuildingUpgradeOrderRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CancelBuildingUpgradeOrderRequest {
    return new CancelBuildingUpgradeOrderRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CancelBuildingUpgradeOrderRequest {
    return new CancelBuildingUpgradeOrderRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CancelBuildingUpgradeOrderRequest | PlainMessage<CancelBuildingUpgradeOrderRequest> | undefined, b: CancelBuildingUpgradeOrderRequest | PlainMessage<CancelBuildingUpgradeOrderRequest> | undefined): boolean {
    return proto3.util.equals(CancelBuildingUpgradeOrderRequest, a, b);
  }
}

/**
 * @generated from message server.v1.CancelBuildingUpgradeOrderResponse
 */
export class CancelBuildingUpgradeOrderResponse extends Message<CancelBuildingUpgradeOrderResponse> {
  constructor(data?: PartialMessage<CancelBuildingUpgradeOrderResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.v1.CancelBuildingUpgradeOrderResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CancelBuildingUpgradeOrderResponse {
    return new CancelBuildingUpgradeOrderResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CancelBuildingUpgradeOrderResponse {
    return new CancelBuildingUpgradeOrderResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CancelBuildingUpgradeOrderResponse {
    return new CancelBuildingUpgradeOrderResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CancelBuildingUpgradeOrderResponse | PlainMessage<CancelBuildingUpgradeOrderResponse> | undefined, b: CancelBuildingUpgradeOrderResponse | PlainMessage<CancelBuildingUpgradeOrderResponse> | undefined): boolean {
    return proto3.util.equals(CancelBuildingUpgradeOrderResponse, a, b);
  }
}

/**
 * IssueTroopTrainingOrder
 *
 * @generated from message server.v1.IssueTroopTrainingOrderRequest
 */
export class IssueTroopTrainingOrderRequest extends Message<IssueTroopTrainingOrderRequest> {
  /**
   * @generated from field: string troop_id = 1;
   */
  troopId = "";

  /**
   * @generated from field: uint32 quantity = 2;
   */
  quantity = 0;

  /**
   * @generated from field: string village_id = 3;
   */
  villageId = "";

  constructor(data?: PartialMessage<IssueTroopTrainingOrderRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.v1.IssueTroopTrainingOrderRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "troop_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "quantity", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "village_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IssueTroopTrainingOrderRequest {
    return new IssueTroopTrainingOrderRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IssueTroopTrainingOrderRequest {
    return new IssueTroopTrainingOrderRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IssueTroopTrainingOrderRequest {
    return new IssueTroopTrainingOrderRequest().fromJsonString(jsonString, options);
  }

  static equals(a: IssueTroopTrainingOrderRequest | PlainMessage<IssueTroopTrainingOrderRequest> | undefined, b: IssueTroopTrainingOrderRequest | PlainMessage<IssueTroopTrainingOrderRequest> | undefined): boolean {
    return proto3.util.equals(IssueTroopTrainingOrderRequest, a, b);
  }
}

/**
 * @generated from message server.v1.IssueTroopTrainingOrderResponse
 */
export class IssueTroopTrainingOrderResponse extends Message<IssueTroopTrainingOrderResponse> {
  /**
   * @generated from field: server.v1.Village.TroopTrainingOrder order = 1;
   */
  order?: Village_TroopTrainingOrder;

  constructor(data?: PartialMessage<IssueTroopTrainingOrderResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.v1.IssueTroopTrainingOrderResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "order", kind: "message", T: Village_TroopTrainingOrder },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IssueTroopTrainingOrderResponse {
    return new IssueTroopTrainingOrderResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IssueTroopTrainingOrderResponse {
    return new IssueTroopTrainingOrderResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IssueTroopTrainingOrderResponse {
    return new IssueTroopTrainingOrderResponse().fromJsonString(jsonString, options);
  }

  static equals(a: IssueTroopTrainingOrderResponse | PlainMessage<IssueTroopTrainingOrderResponse> | undefined, b: IssueTroopTrainingOrderResponse | PlainMessage<IssueTroopTrainingOrderResponse> | undefined): boolean {
    return proto3.util.equals(IssueTroopTrainingOrderResponse, a, b);
  }
}

/**
 * CancelTroopTrainingOrder
 *
 * @generated from message server.v1.CancelTroopTrainingOrderRequest
 */
export class CancelTroopTrainingOrderRequest extends Message<CancelTroopTrainingOrderRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<CancelTroopTrainingOrderRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.v1.CancelTroopTrainingOrderRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CancelTroopTrainingOrderRequest {
    return new CancelTroopTrainingOrderRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CancelTroopTrainingOrderRequest {
    return new CancelTroopTrainingOrderRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CancelTroopTrainingOrderRequest {
    return new CancelTroopTrainingOrderRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CancelTroopTrainingOrderRequest | PlainMessage<CancelTroopTrainingOrderRequest> | undefined, b: CancelTroopTrainingOrderRequest | PlainMessage<CancelTroopTrainingOrderRequest> | undefined): boolean {
    return proto3.util.equals(CancelTroopTrainingOrderRequest, a, b);
  }
}

/**
 * @generated from message server.v1.CancelTroopTrainingOrderResponse
 */
export class CancelTroopTrainingOrderResponse extends Message<CancelTroopTrainingOrderResponse> {
  constructor(data?: PartialMessage<CancelTroopTrainingOrderResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.v1.CancelTroopTrainingOrderResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CancelTroopTrainingOrderResponse {
    return new CancelTroopTrainingOrderResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CancelTroopTrainingOrderResponse {
    return new CancelTroopTrainingOrderResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CancelTroopTrainingOrderResponse {
    return new CancelTroopTrainingOrderResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CancelTroopTrainingOrderResponse | PlainMessage<CancelTroopTrainingOrderResponse> | undefined, b: CancelTroopTrainingOrderResponse | PlainMessage<CancelTroopTrainingOrderResponse> | undefined): boolean {
    return proto3.util.equals(CancelTroopTrainingOrderResponse, a, b);
  }
}

/**
 * IssueResourceTransferOrder
 *
 * @generated from message server.v1.IssueResourceTransferOrderRequest
 */
export class IssueResourceTransferOrderRequest extends Message<IssueResourceTransferOrderRequest> {
  /**
   * @generated from field: server.v1.Resources resources = 1;
   */
  resources?: Resources;

  /**
   * @generated from field: string source_coords = 2;
   */
  sourceCoords = "";

  /**
   * @generated from field: string target_coords = 3;
   */
  targetCoords = "";

  constructor(data?: PartialMessage<IssueResourceTransferOrderRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.v1.IssueResourceTransferOrderRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "resources", kind: "message", T: Resources },
    { no: 2, name: "source_coords", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "target_coords", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IssueResourceTransferOrderRequest {
    return new IssueResourceTransferOrderRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IssueResourceTransferOrderRequest {
    return new IssueResourceTransferOrderRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IssueResourceTransferOrderRequest {
    return new IssueResourceTransferOrderRequest().fromJsonString(jsonString, options);
  }

  static equals(a: IssueResourceTransferOrderRequest | PlainMessage<IssueResourceTransferOrderRequest> | undefined, b: IssueResourceTransferOrderRequest | PlainMessage<IssueResourceTransferOrderRequest> | undefined): boolean {
    return proto3.util.equals(IssueResourceTransferOrderRequest, a, b);
  }
}

/**
 * @generated from message server.v1.IssueResourceTransferOrderResponse
 */
export class IssueResourceTransferOrderResponse extends Message<IssueResourceTransferOrderResponse> {
  /**
   * @generated from field: server.v1.Village.ResourceTransferOrder order = 1;
   */
  order?: Village_ResourceTransferOrder;

  constructor(data?: PartialMessage<IssueResourceTransferOrderResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.v1.IssueResourceTransferOrderResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "order", kind: "message", T: Village_ResourceTransferOrder },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IssueResourceTransferOrderResponse {
    return new IssueResourceTransferOrderResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IssueResourceTransferOrderResponse {
    return new IssueResourceTransferOrderResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IssueResourceTransferOrderResponse {
    return new IssueResourceTransferOrderResponse().fromJsonString(jsonString, options);
  }

  static equals(a: IssueResourceTransferOrderResponse | PlainMessage<IssueResourceTransferOrderResponse> | undefined, b: IssueResourceTransferOrderResponse | PlainMessage<IssueResourceTransferOrderResponse> | undefined): boolean {
    return proto3.util.equals(IssueResourceTransferOrderResponse, a, b);
  }
}

/**
 * CancelResourceTransferOrder
 *
 * @generated from message server.v1.CancelResourceTransferOrderRequest
 */
export class CancelResourceTransferOrderRequest extends Message<CancelResourceTransferOrderRequest> {
  /**
   * @generated from field: string source_coords = 1;
   */
  sourceCoords = "";

  /**
   * @generated from field: string id = 2;
   */
  id = "";

  constructor(data?: PartialMessage<CancelResourceTransferOrderRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.v1.CancelResourceTransferOrderRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "source_coords", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CancelResourceTransferOrderRequest {
    return new CancelResourceTransferOrderRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CancelResourceTransferOrderRequest {
    return new CancelResourceTransferOrderRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CancelResourceTransferOrderRequest {
    return new CancelResourceTransferOrderRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CancelResourceTransferOrderRequest | PlainMessage<CancelResourceTransferOrderRequest> | undefined, b: CancelResourceTransferOrderRequest | PlainMessage<CancelResourceTransferOrderRequest> | undefined): boolean {
    return proto3.util.equals(CancelResourceTransferOrderRequest, a, b);
  }
}

/**
 * @generated from message server.v1.CancelResourceTransferOrderResponse
 */
export class CancelResourceTransferOrderResponse extends Message<CancelResourceTransferOrderResponse> {
  constructor(data?: PartialMessage<CancelResourceTransferOrderResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.v1.CancelResourceTransferOrderResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CancelResourceTransferOrderResponse {
    return new CancelResourceTransferOrderResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CancelResourceTransferOrderResponse {
    return new CancelResourceTransferOrderResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CancelResourceTransferOrderResponse {
    return new CancelResourceTransferOrderResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CancelResourceTransferOrderResponse | PlainMessage<CancelResourceTransferOrderResponse> | undefined, b: CancelResourceTransferOrderResponse | PlainMessage<CancelResourceTransferOrderResponse> | undefined): boolean {
    return proto3.util.equals(CancelResourceTransferOrderResponse, a, b);
  }
}

