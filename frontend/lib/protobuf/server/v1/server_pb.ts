// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file server/v1/server.proto (package server.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, UInt32Value } from "@bufbuild/protobuf";

/**
 * @generated from message server.v1.Village
 */
export class Village extends Message<Village> {
  /**
   * @generated from field: uint32 id = 1;
   */
  id = 0;

  /**
   * @generated from field: server.v1.Resources resources = 2;
   */
  resources?: Resources;

  /**
   * @generated from field: repeated server.v1.Building buildings = 3;
   */
  buildings: Building[] = [];

  /**
   * @generated from field: repeated server.v1.Troop troops = 4;
   */
  troops: Troop[] = [];

  /**
   * @generated from field: repeated server.v1.Troop.TrainOrder troop_train_orders = 5;
   */
  troopTrainOrders: Troop_TrainOrder[] = [];

  constructor(data?: PartialMessage<Village>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.v1.Village";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "resources", kind: "message", T: Resources },
    { no: 3, name: "buildings", kind: "message", T: Building, repeated: true },
    { no: 4, name: "troops", kind: "message", T: Troop, repeated: true },
    { no: 5, name: "troop_train_orders", kind: "message", T: Troop_TrainOrder, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Village {
    return new Village().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Village {
    return new Village().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Village {
    return new Village().fromJsonString(jsonString, options);
  }

  static equals(a: Village | PlainMessage<Village> | undefined, b: Village | PlainMessage<Village> | undefined): boolean {
    return proto3.util.equals(Village, a, b);
  }
}

/**
 * @generated from message server.v1.Resources
 */
export class Resources extends Message<Resources> {
  /**
   * @generated from field: uint32 time = 1;
   */
  time = 0;

  /**
   * @generated from field: uint32 gold = 2;
   */
  gold = 0;

  constructor(data?: PartialMessage<Resources>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.v1.Resources";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "time", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "gold", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Resources {
    return new Resources().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Resources {
    return new Resources().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Resources {
    return new Resources().fromJsonString(jsonString, options);
  }

  static equals(a: Resources | PlainMessage<Resources> | undefined, b: Resources | PlainMessage<Resources> | undefined): boolean {
    return proto3.util.equals(Resources, a, b);
  }
}

/**
 * @generated from message server.v1.Building
 */
export class Building extends Message<Building> {
  /**
   * @generated from field: uint32 id = 1;
   */
  id = 0;

  /**
   * @generated from field: server.v1.Building.Kind kind = 2;
   */
  kind = Building_Kind.UNSPECIFIED;

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: uint32 level = 4;
   */
  level = 0;

  /**
   * @generated from field: server.v1.Building.UpgradeStatus upgrade_status = 5;
   */
  upgradeStatus = Building_UpgradeStatus.UNSPECIFIED;

  /**
   * @generated from field: uint32 upgrade_time_left = 6;
   */
  upgradeTimeLeft = 0;

  /**
   * @generated from field: server.v1.Resources upgrade_cost = 7;
   */
  upgradeCost?: Resources;

  constructor(data?: PartialMessage<Building>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.v1.Building";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "kind", kind: "enum", T: proto3.getEnumType(Building_Kind) },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "level", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 5, name: "upgrade_status", kind: "enum", T: proto3.getEnumType(Building_UpgradeStatus) },
    { no: 6, name: "upgrade_time_left", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 7, name: "upgrade_cost", kind: "message", T: Resources },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Building {
    return new Building().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Building {
    return new Building().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Building {
    return new Building().fromJsonString(jsonString, options);
  }

  static equals(a: Building | PlainMessage<Building> | undefined, b: Building | PlainMessage<Building> | undefined): boolean {
    return proto3.util.equals(Building, a, b);
  }
}

/**
 * @generated from enum server.v1.Building.Kind
 */
export enum Building_Kind {
  /**
   * @generated from enum value: KIND_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: KIND_HALL = 1;
   */
  HALL = 1,

  /**
   * @generated from enum value: KIND_GOLD_MINE = 2;
   */
  GOLD_MINE = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(Building_Kind)
proto3.util.setEnumType(Building_Kind, "server.v1.Building.Kind", [
  { no: 0, name: "KIND_UNSPECIFIED" },
  { no: 1, name: "KIND_HALL" },
  { no: 2, name: "KIND_GOLD_MINE" },
]);

/**
 * TODO: Move this logic to the frontend
 *
 * @generated from enum server.v1.Building.UpgradeStatus
 */
export enum Building_UpgradeStatus {
  /**
   * @generated from enum value: UPGRADE_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: UPGRADE_STATUS_UPGRADABLE = 1;
   */
  UPGRADABLE = 1,

  /**
   * @generated from enum value: UPGRADE_STATUS_UPGRADING = 2;
   */
  UPGRADING = 2,

  /**
   * @generated from enum value: UPGRADE_STATUS_MAX_LEVEL = 3;
   */
  MAX_LEVEL = 3,

  /**
   * @generated from enum value: UPGRADE_STATUS_INSUFFICIENT_RESOURCES = 4;
   */
  INSUFFICIENT_RESOURCES = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(Building_UpgradeStatus)
proto3.util.setEnumType(Building_UpgradeStatus, "server.v1.Building.UpgradeStatus", [
  { no: 0, name: "UPGRADE_STATUS_UNSPECIFIED" },
  { no: 1, name: "UPGRADE_STATUS_UPGRADABLE" },
  { no: 2, name: "UPGRADE_STATUS_UPGRADING" },
  { no: 3, name: "UPGRADE_STATUS_MAX_LEVEL" },
  { no: 4, name: "UPGRADE_STATUS_INSUFFICIENT_RESOURCES" },
]);

/**
 * @generated from message server.v1.Troop
 */
export class Troop extends Message<Troop> {
  /**
   * @generated from field: uint32 id = 1;
   */
  id = 0;

  /**
   * @generated from field: server.v1.Troop.Kind kind = 2;
   */
  kind = Troop_Kind.UNSPECIFIED;

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: server.v1.Resources train_cost = 4;
   */
  trainCost?: Resources;

  /**
   * @generated from field: uint32 quantity = 5;
   */
  quantity = 0;

  constructor(data?: PartialMessage<Troop>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.v1.Troop";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "kind", kind: "enum", T: proto3.getEnumType(Troop_Kind) },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "train_cost", kind: "message", T: Resources },
    { no: 5, name: "quantity", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Troop {
    return new Troop().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Troop {
    return new Troop().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Troop {
    return new Troop().fromJsonString(jsonString, options);
  }

  static equals(a: Troop | PlainMessage<Troop> | undefined, b: Troop | PlainMessage<Troop> | undefined): boolean {
    return proto3.util.equals(Troop, a, b);
  }
}

/**
 * @generated from enum server.v1.Troop.Kind
 */
export enum Troop_Kind {
  /**
   * @generated from enum value: KIND_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: KIND_LEADER = 1;
   */
  LEADER = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(Troop_Kind)
proto3.util.setEnumType(Troop_Kind, "server.v1.Troop.Kind", [
  { no: 0, name: "KIND_UNSPECIFIED" },
  { no: 1, name: "KIND_LEADER" },
]);

/**
 * @generated from message server.v1.Troop.TrainOrder
 */
export class Troop_TrainOrder extends Message<Troop_TrainOrder> {
  /**
   * @generated from field: server.v1.Troop troop = 1;
   */
  troop?: Troop;

  /**
   * @generated from field: uint32 quantity = 2;
   */
  quantity = 0;

  /**
   * @generated from field: server.v1.Resources cost = 3;
   */
  cost?: Resources;

  constructor(data?: PartialMessage<Troop_TrainOrder>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.v1.Troop.TrainOrder";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "troop", kind: "message", T: Troop },
    { no: 2, name: "quantity", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "cost", kind: "message", T: Resources },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Troop_TrainOrder {
    return new Troop_TrainOrder().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Troop_TrainOrder {
    return new Troop_TrainOrder().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Troop_TrainOrder {
    return new Troop_TrainOrder().fromJsonString(jsonString, options);
  }

  static equals(a: Troop_TrainOrder | PlainMessage<Troop_TrainOrder> | undefined, b: Troop_TrainOrder | PlainMessage<Troop_TrainOrder> | undefined): boolean {
    return proto3.util.equals(Troop_TrainOrder, a, b);
  }
}

/**
 * GetVillage
 *
 * @generated from message server.v1.GetVillageRequest
 */
export class GetVillageRequest extends Message<GetVillageRequest> {
  /**
   * @generated from field: google.protobuf.UInt32Value id = 1;
   */
  id?: number;

  constructor(data?: PartialMessage<GetVillageRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.v1.GetVillageRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: UInt32Value },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetVillageRequest {
    return new GetVillageRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetVillageRequest {
    return new GetVillageRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetVillageRequest {
    return new GetVillageRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetVillageRequest | PlainMessage<GetVillageRequest> | undefined, b: GetVillageRequest | PlainMessage<GetVillageRequest> | undefined): boolean {
    return proto3.util.equals(GetVillageRequest, a, b);
  }
}

/**
 * @generated from message server.v1.GetVillageResponse
 */
export class GetVillageResponse extends Message<GetVillageResponse> {
  /**
   * @generated from field: server.v1.Village Village = 1;
   */
  Village?: Village;

  constructor(data?: PartialMessage<GetVillageResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.v1.GetVillageResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Village", kind: "message", T: Village },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetVillageResponse {
    return new GetVillageResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetVillageResponse {
    return new GetVillageResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetVillageResponse {
    return new GetVillageResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetVillageResponse | PlainMessage<GetVillageResponse> | undefined, b: GetVillageResponse | PlainMessage<GetVillageResponse> | undefined): boolean {
    return proto3.util.equals(GetVillageResponse, a, b);
  }
}

/**
 * UpgradeBuilding
 *
 * @generated from message server.v1.UpgradeBuildingRequest
 */
export class UpgradeBuildingRequest extends Message<UpgradeBuildingRequest> {
  /**
   * @generated from field: uint32 id = 1;
   */
  id = 0;

  constructor(data?: PartialMessage<UpgradeBuildingRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.v1.UpgradeBuildingRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpgradeBuildingRequest {
    return new UpgradeBuildingRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpgradeBuildingRequest {
    return new UpgradeBuildingRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpgradeBuildingRequest {
    return new UpgradeBuildingRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpgradeBuildingRequest | PlainMessage<UpgradeBuildingRequest> | undefined, b: UpgradeBuildingRequest | PlainMessage<UpgradeBuildingRequest> | undefined): boolean {
    return proto3.util.equals(UpgradeBuildingRequest, a, b);
  }
}

/**
 * @generated from message server.v1.UpgradeBuildingResponse
 */
export class UpgradeBuildingResponse extends Message<UpgradeBuildingResponse> {
  /**
   * @generated from field: server.v1.Building building = 1;
   */
  building?: Building;

  constructor(data?: PartialMessage<UpgradeBuildingResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.v1.UpgradeBuildingResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "building", kind: "message", T: Building },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpgradeBuildingResponse {
    return new UpgradeBuildingResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpgradeBuildingResponse {
    return new UpgradeBuildingResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpgradeBuildingResponse {
    return new UpgradeBuildingResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpgradeBuildingResponse | PlainMessage<UpgradeBuildingResponse> | undefined, b: UpgradeBuildingResponse | PlainMessage<UpgradeBuildingResponse> | undefined): boolean {
    return proto3.util.equals(UpgradeBuildingResponse, a, b);
  }
}

/**
 * CancelUpgradeBuilding
 *
 * @generated from message server.v1.CancelUpgradeBuildingRequest
 */
export class CancelUpgradeBuildingRequest extends Message<CancelUpgradeBuildingRequest> {
  /**
   * @generated from field: uint32 id = 1;
   */
  id = 0;

  constructor(data?: PartialMessage<CancelUpgradeBuildingRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.v1.CancelUpgradeBuildingRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CancelUpgradeBuildingRequest {
    return new CancelUpgradeBuildingRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CancelUpgradeBuildingRequest {
    return new CancelUpgradeBuildingRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CancelUpgradeBuildingRequest {
    return new CancelUpgradeBuildingRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CancelUpgradeBuildingRequest | PlainMessage<CancelUpgradeBuildingRequest> | undefined, b: CancelUpgradeBuildingRequest | PlainMessage<CancelUpgradeBuildingRequest> | undefined): boolean {
    return proto3.util.equals(CancelUpgradeBuildingRequest, a, b);
  }
}

/**
 * @generated from message server.v1.CancelUpgradeBuildingResponse
 */
export class CancelUpgradeBuildingResponse extends Message<CancelUpgradeBuildingResponse> {
  /**
   * @generated from field: server.v1.Building building = 1;
   */
  building?: Building;

  constructor(data?: PartialMessage<CancelUpgradeBuildingResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.v1.CancelUpgradeBuildingResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "building", kind: "message", T: Building },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CancelUpgradeBuildingResponse {
    return new CancelUpgradeBuildingResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CancelUpgradeBuildingResponse {
    return new CancelUpgradeBuildingResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CancelUpgradeBuildingResponse {
    return new CancelUpgradeBuildingResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CancelUpgradeBuildingResponse | PlainMessage<CancelUpgradeBuildingResponse> | undefined, b: CancelUpgradeBuildingResponse | PlainMessage<CancelUpgradeBuildingResponse> | undefined): boolean {
    return proto3.util.equals(CancelUpgradeBuildingResponse, a, b);
  }
}

