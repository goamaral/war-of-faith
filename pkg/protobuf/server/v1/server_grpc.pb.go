// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: server/v1/server.proto

package serverv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceClient interface {
	// VILLAGES
	GetVillage(ctx context.Context, in *GetVillageRequest, opts ...grpc.CallOption) (*GetVillageResponse, error)
	GetVillages(ctx context.Context, in *GetVillagesRequest, opts ...grpc.CallOption) (*GetVillagesResponse, error)
	// BUILDINGS
	GetBuildings(ctx context.Context, in *GetBuildingsRequest, opts ...grpc.CallOption) (*GetBuildingsResponse, error)
	IssueBuildingUpgradeOrder(ctx context.Context, in *IssueBuildingUpgradeOrderRequest, opts ...grpc.CallOption) (*IssueBuildingUpgradeOrderResponse, error)
	CancelBuildingUpgradeOrder(ctx context.Context, in *CancelBuildingUpgradeOrderRequest, opts ...grpc.CallOption) (*CancelBuildingUpgradeOrderResponse, error)
	// TROOPS
	GetTroops(ctx context.Context, in *GetTroopsRequest, opts ...grpc.CallOption) (*GetTroopsResponse, error)
	IssueTroopTrainingOrder(ctx context.Context, in *IssueTroopTrainingOrderRequest, opts ...grpc.CallOption) (*IssueTroopTrainingOrderResponse, error)
	CancelTroopTrainingOrder(ctx context.Context, in *CancelTroopTrainingOrderRequest, opts ...grpc.CallOption) (*CancelTroopTrainingOrderResponse, error)
	// TEMPLES
	GetTemple(ctx context.Context, in *GetTempleRequest, opts ...grpc.CallOption) (*GetTempleResponse, error)
	IssueTempleDonationOrder(ctx context.Context, in *IssueTempleDonationOrderRequest, opts ...grpc.CallOption) (*IssueTempleDonationOrderResponse, error)
	// WORLD
	GetWorld(ctx context.Context, in *GetWorldRequest, opts ...grpc.CallOption) (*GetWorldResponse, error)
	IssueAttack(ctx context.Context, in *IssueAttackRequest, opts ...grpc.CallOption) (*IssueAttackResponse, error)
	CancelAttack(ctx context.Context, in *CancelAttackRequest, opts ...grpc.CallOption) (*CancelAttackResponse, error)
	GetAttacks(ctx context.Context, in *GetAttacksRequest, opts ...grpc.CallOption) (*GetAttacksResponse, error)
	// PLAYERS
	GetPlayer(ctx context.Context, in *GetPlayerRequest, opts ...grpc.CallOption) (*GetPlayerResponse, error)
}

type serviceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceClient(cc grpc.ClientConnInterface) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) GetVillage(ctx context.Context, in *GetVillageRequest, opts ...grpc.CallOption) (*GetVillageResponse, error) {
	out := new(GetVillageResponse)
	err := c.cc.Invoke(ctx, "/server.v1.Service/GetVillage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetVillages(ctx context.Context, in *GetVillagesRequest, opts ...grpc.CallOption) (*GetVillagesResponse, error) {
	out := new(GetVillagesResponse)
	err := c.cc.Invoke(ctx, "/server.v1.Service/GetVillages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetBuildings(ctx context.Context, in *GetBuildingsRequest, opts ...grpc.CallOption) (*GetBuildingsResponse, error) {
	out := new(GetBuildingsResponse)
	err := c.cc.Invoke(ctx, "/server.v1.Service/GetBuildings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) IssueBuildingUpgradeOrder(ctx context.Context, in *IssueBuildingUpgradeOrderRequest, opts ...grpc.CallOption) (*IssueBuildingUpgradeOrderResponse, error) {
	out := new(IssueBuildingUpgradeOrderResponse)
	err := c.cc.Invoke(ctx, "/server.v1.Service/IssueBuildingUpgradeOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CancelBuildingUpgradeOrder(ctx context.Context, in *CancelBuildingUpgradeOrderRequest, opts ...grpc.CallOption) (*CancelBuildingUpgradeOrderResponse, error) {
	out := new(CancelBuildingUpgradeOrderResponse)
	err := c.cc.Invoke(ctx, "/server.v1.Service/CancelBuildingUpgradeOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetTroops(ctx context.Context, in *GetTroopsRequest, opts ...grpc.CallOption) (*GetTroopsResponse, error) {
	out := new(GetTroopsResponse)
	err := c.cc.Invoke(ctx, "/server.v1.Service/GetTroops", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) IssueTroopTrainingOrder(ctx context.Context, in *IssueTroopTrainingOrderRequest, opts ...grpc.CallOption) (*IssueTroopTrainingOrderResponse, error) {
	out := new(IssueTroopTrainingOrderResponse)
	err := c.cc.Invoke(ctx, "/server.v1.Service/IssueTroopTrainingOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CancelTroopTrainingOrder(ctx context.Context, in *CancelTroopTrainingOrderRequest, opts ...grpc.CallOption) (*CancelTroopTrainingOrderResponse, error) {
	out := new(CancelTroopTrainingOrderResponse)
	err := c.cc.Invoke(ctx, "/server.v1.Service/CancelTroopTrainingOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetTemple(ctx context.Context, in *GetTempleRequest, opts ...grpc.CallOption) (*GetTempleResponse, error) {
	out := new(GetTempleResponse)
	err := c.cc.Invoke(ctx, "/server.v1.Service/GetTemple", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) IssueTempleDonationOrder(ctx context.Context, in *IssueTempleDonationOrderRequest, opts ...grpc.CallOption) (*IssueTempleDonationOrderResponse, error) {
	out := new(IssueTempleDonationOrderResponse)
	err := c.cc.Invoke(ctx, "/server.v1.Service/IssueTempleDonationOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetWorld(ctx context.Context, in *GetWorldRequest, opts ...grpc.CallOption) (*GetWorldResponse, error) {
	out := new(GetWorldResponse)
	err := c.cc.Invoke(ctx, "/server.v1.Service/GetWorld", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) IssueAttack(ctx context.Context, in *IssueAttackRequest, opts ...grpc.CallOption) (*IssueAttackResponse, error) {
	out := new(IssueAttackResponse)
	err := c.cc.Invoke(ctx, "/server.v1.Service/IssueAttack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CancelAttack(ctx context.Context, in *CancelAttackRequest, opts ...grpc.CallOption) (*CancelAttackResponse, error) {
	out := new(CancelAttackResponse)
	err := c.cc.Invoke(ctx, "/server.v1.Service/CancelAttack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetAttacks(ctx context.Context, in *GetAttacksRequest, opts ...grpc.CallOption) (*GetAttacksResponse, error) {
	out := new(GetAttacksResponse)
	err := c.cc.Invoke(ctx, "/server.v1.Service/GetAttacks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetPlayer(ctx context.Context, in *GetPlayerRequest, opts ...grpc.CallOption) (*GetPlayerResponse, error) {
	out := new(GetPlayerResponse)
	err := c.cc.Invoke(ctx, "/server.v1.Service/GetPlayer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
// All implementations should embed UnimplementedServiceServer
// for forward compatibility
type ServiceServer interface {
	// VILLAGES
	GetVillage(context.Context, *GetVillageRequest) (*GetVillageResponse, error)
	GetVillages(context.Context, *GetVillagesRequest) (*GetVillagesResponse, error)
	// BUILDINGS
	GetBuildings(context.Context, *GetBuildingsRequest) (*GetBuildingsResponse, error)
	IssueBuildingUpgradeOrder(context.Context, *IssueBuildingUpgradeOrderRequest) (*IssueBuildingUpgradeOrderResponse, error)
	CancelBuildingUpgradeOrder(context.Context, *CancelBuildingUpgradeOrderRequest) (*CancelBuildingUpgradeOrderResponse, error)
	// TROOPS
	GetTroops(context.Context, *GetTroopsRequest) (*GetTroopsResponse, error)
	IssueTroopTrainingOrder(context.Context, *IssueTroopTrainingOrderRequest) (*IssueTroopTrainingOrderResponse, error)
	CancelTroopTrainingOrder(context.Context, *CancelTroopTrainingOrderRequest) (*CancelTroopTrainingOrderResponse, error)
	// TEMPLES
	GetTemple(context.Context, *GetTempleRequest) (*GetTempleResponse, error)
	IssueTempleDonationOrder(context.Context, *IssueTempleDonationOrderRequest) (*IssueTempleDonationOrderResponse, error)
	// WORLD
	GetWorld(context.Context, *GetWorldRequest) (*GetWorldResponse, error)
	IssueAttack(context.Context, *IssueAttackRequest) (*IssueAttackResponse, error)
	CancelAttack(context.Context, *CancelAttackRequest) (*CancelAttackResponse, error)
	GetAttacks(context.Context, *GetAttacksRequest) (*GetAttacksResponse, error)
	// PLAYERS
	GetPlayer(context.Context, *GetPlayerRequest) (*GetPlayerResponse, error)
}

// UnimplementedServiceServer should be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (UnimplementedServiceServer) GetVillage(context.Context, *GetVillageRequest) (*GetVillageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVillage not implemented")
}
func (UnimplementedServiceServer) GetVillages(context.Context, *GetVillagesRequest) (*GetVillagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVillages not implemented")
}
func (UnimplementedServiceServer) GetBuildings(context.Context, *GetBuildingsRequest) (*GetBuildingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBuildings not implemented")
}
func (UnimplementedServiceServer) IssueBuildingUpgradeOrder(context.Context, *IssueBuildingUpgradeOrderRequest) (*IssueBuildingUpgradeOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssueBuildingUpgradeOrder not implemented")
}
func (UnimplementedServiceServer) CancelBuildingUpgradeOrder(context.Context, *CancelBuildingUpgradeOrderRequest) (*CancelBuildingUpgradeOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelBuildingUpgradeOrder not implemented")
}
func (UnimplementedServiceServer) GetTroops(context.Context, *GetTroopsRequest) (*GetTroopsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTroops not implemented")
}
func (UnimplementedServiceServer) IssueTroopTrainingOrder(context.Context, *IssueTroopTrainingOrderRequest) (*IssueTroopTrainingOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssueTroopTrainingOrder not implemented")
}
func (UnimplementedServiceServer) CancelTroopTrainingOrder(context.Context, *CancelTroopTrainingOrderRequest) (*CancelTroopTrainingOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelTroopTrainingOrder not implemented")
}
func (UnimplementedServiceServer) GetTemple(context.Context, *GetTempleRequest) (*GetTempleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTemple not implemented")
}
func (UnimplementedServiceServer) IssueTempleDonationOrder(context.Context, *IssueTempleDonationOrderRequest) (*IssueTempleDonationOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssueTempleDonationOrder not implemented")
}
func (UnimplementedServiceServer) GetWorld(context.Context, *GetWorldRequest) (*GetWorldResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorld not implemented")
}
func (UnimplementedServiceServer) IssueAttack(context.Context, *IssueAttackRequest) (*IssueAttackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssueAttack not implemented")
}
func (UnimplementedServiceServer) CancelAttack(context.Context, *CancelAttackRequest) (*CancelAttackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelAttack not implemented")
}
func (UnimplementedServiceServer) GetAttacks(context.Context, *GetAttacksRequest) (*GetAttacksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAttacks not implemented")
}
func (UnimplementedServiceServer) GetPlayer(context.Context, *GetPlayerRequest) (*GetPlayerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayer not implemented")
}

// UnsafeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceServer will
// result in compilation errors.
type UnsafeServiceServer interface {
	mustEmbedUnimplementedServiceServer()
}

func RegisterServiceServer(s grpc.ServiceRegistrar, srv ServiceServer) {
	s.RegisterService(&Service_ServiceDesc, srv)
}

func _Service_GetVillage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVillageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetVillage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.v1.Service/GetVillage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetVillage(ctx, req.(*GetVillageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetVillages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVillagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetVillages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.v1.Service/GetVillages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetVillages(ctx, req.(*GetVillagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetBuildings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBuildingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetBuildings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.v1.Service/GetBuildings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetBuildings(ctx, req.(*GetBuildingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_IssueBuildingUpgradeOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueBuildingUpgradeOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).IssueBuildingUpgradeOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.v1.Service/IssueBuildingUpgradeOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).IssueBuildingUpgradeOrder(ctx, req.(*IssueBuildingUpgradeOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_CancelBuildingUpgradeOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelBuildingUpgradeOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).CancelBuildingUpgradeOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.v1.Service/CancelBuildingUpgradeOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).CancelBuildingUpgradeOrder(ctx, req.(*CancelBuildingUpgradeOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetTroops_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTroopsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetTroops(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.v1.Service/GetTroops",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetTroops(ctx, req.(*GetTroopsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_IssueTroopTrainingOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueTroopTrainingOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).IssueTroopTrainingOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.v1.Service/IssueTroopTrainingOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).IssueTroopTrainingOrder(ctx, req.(*IssueTroopTrainingOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_CancelTroopTrainingOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelTroopTrainingOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).CancelTroopTrainingOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.v1.Service/CancelTroopTrainingOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).CancelTroopTrainingOrder(ctx, req.(*CancelTroopTrainingOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetTemple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTempleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetTemple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.v1.Service/GetTemple",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetTemple(ctx, req.(*GetTempleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_IssueTempleDonationOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueTempleDonationOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).IssueTempleDonationOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.v1.Service/IssueTempleDonationOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).IssueTempleDonationOrder(ctx, req.(*IssueTempleDonationOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetWorld_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetWorld(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.v1.Service/GetWorld",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetWorld(ctx, req.(*GetWorldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_IssueAttack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueAttackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).IssueAttack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.v1.Service/IssueAttack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).IssueAttack(ctx, req.(*IssueAttackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_CancelAttack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelAttackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).CancelAttack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.v1.Service/CancelAttack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).CancelAttack(ctx, req.(*CancelAttackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetAttacks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAttacksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetAttacks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.v1.Service/GetAttacks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetAttacks(ctx, req.(*GetAttacksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.v1.Service/GetPlayer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetPlayer(ctx, req.(*GetPlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Service_ServiceDesc is the grpc.ServiceDesc for Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "server.v1.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVillage",
			Handler:    _Service_GetVillage_Handler,
		},
		{
			MethodName: "GetVillages",
			Handler:    _Service_GetVillages_Handler,
		},
		{
			MethodName: "GetBuildings",
			Handler:    _Service_GetBuildings_Handler,
		},
		{
			MethodName: "IssueBuildingUpgradeOrder",
			Handler:    _Service_IssueBuildingUpgradeOrder_Handler,
		},
		{
			MethodName: "CancelBuildingUpgradeOrder",
			Handler:    _Service_CancelBuildingUpgradeOrder_Handler,
		},
		{
			MethodName: "GetTroops",
			Handler:    _Service_GetTroops_Handler,
		},
		{
			MethodName: "IssueTroopTrainingOrder",
			Handler:    _Service_IssueTroopTrainingOrder_Handler,
		},
		{
			MethodName: "CancelTroopTrainingOrder",
			Handler:    _Service_CancelTroopTrainingOrder_Handler,
		},
		{
			MethodName: "GetTemple",
			Handler:    _Service_GetTemple_Handler,
		},
		{
			MethodName: "IssueTempleDonationOrder",
			Handler:    _Service_IssueTempleDonationOrder_Handler,
		},
		{
			MethodName: "GetWorld",
			Handler:    _Service_GetWorld_Handler,
		},
		{
			MethodName: "IssueAttack",
			Handler:    _Service_IssueAttack_Handler,
		},
		{
			MethodName: "CancelAttack",
			Handler:    _Service_CancelAttack_Handler,
		},
		{
			MethodName: "GetAttacks",
			Handler:    _Service_GetAttacks_Handler,
		},
		{
			MethodName: "GetPlayer",
			Handler:    _Service_GetPlayer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server/v1/server.proto",
}
