// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: server/v1/server.proto

package serverv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
	v1 "war-of-faith/pkg/protobuf/server/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ServiceName is the fully-qualified name of the Service service.
	ServiceName = "server.v1.Service"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ServiceSubscribeToWorldProcedure is the fully-qualified name of the Service's SubscribeToWorld
	// RPC.
	ServiceSubscribeToWorldProcedure = "/server.v1.Service/SubscribeToWorld"
	// ServiceIssueAttackProcedure is the fully-qualified name of the Service's IssueAttack RPC.
	ServiceIssueAttackProcedure = "/server.v1.Service/IssueAttack"
	// ServiceCancelAttackProcedure is the fully-qualified name of the Service's CancelAttack RPC.
	ServiceCancelAttackProcedure = "/server.v1.Service/CancelAttack"
	// ServiceIssueBuildingUpgradeOrderProcedure is the fully-qualified name of the Service's
	// IssueBuildingUpgradeOrder RPC.
	ServiceIssueBuildingUpgradeOrderProcedure = "/server.v1.Service/IssueBuildingUpgradeOrder"
	// ServiceCancelBuildingUpgradeOrderProcedure is the fully-qualified name of the Service's
	// CancelBuildingUpgradeOrder RPC.
	ServiceCancelBuildingUpgradeOrderProcedure = "/server.v1.Service/CancelBuildingUpgradeOrder"
	// ServiceIssueTroopTrainingOrderProcedure is the fully-qualified name of the Service's
	// IssueTroopTrainingOrder RPC.
	ServiceIssueTroopTrainingOrderProcedure = "/server.v1.Service/IssueTroopTrainingOrder"
	// ServiceCancelTroopTrainingOrderProcedure is the fully-qualified name of the Service's
	// CancelTroopTrainingOrder RPC.
	ServiceCancelTroopTrainingOrderProcedure = "/server.v1.Service/CancelTroopTrainingOrder"
	// ServiceIssueResourceTransferOrderProcedure is the fully-qualified name of the Service's
	// IssueResourceTransferOrder RPC.
	ServiceIssueResourceTransferOrderProcedure = "/server.v1.Service/IssueResourceTransferOrder"
	// ServiceCancelResourceTransferOrderProcedure is the fully-qualified name of the Service's
	// CancelResourceTransferOrder RPC.
	ServiceCancelResourceTransferOrderProcedure = "/server.v1.Service/CancelResourceTransferOrder"
)

// ServiceClient is a client for the server.v1.Service service.
type ServiceClient interface {
	// WORLD
	SubscribeToWorld(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.ServerStreamForClient[v1.World], error)
	IssueAttack(context.Context, *connect_go.Request[v1.IssueAttackRequest]) (*connect_go.Response[v1.IssueAttackResponse], error)
	CancelAttack(context.Context, *connect_go.Request[v1.CancelAttackRequest]) (*connect_go.Response[v1.CancelAttackResponse], error)
	// VILLAGES
	IssueBuildingUpgradeOrder(context.Context, *connect_go.Request[v1.IssueBuildingUpgradeOrderRequest]) (*connect_go.Response[v1.IssueBuildingUpgradeOrderResponse], error)
	CancelBuildingUpgradeOrder(context.Context, *connect_go.Request[v1.CancelBuildingUpgradeOrderRequest]) (*connect_go.Response[v1.CancelBuildingUpgradeOrderResponse], error)
	IssueTroopTrainingOrder(context.Context, *connect_go.Request[v1.IssueTroopTrainingOrderRequest]) (*connect_go.Response[v1.IssueTroopTrainingOrderResponse], error)
	CancelTroopTrainingOrder(context.Context, *connect_go.Request[v1.CancelTroopTrainingOrderRequest]) (*connect_go.Response[v1.CancelTroopTrainingOrderResponse], error)
	IssueResourceTransferOrder(context.Context, *connect_go.Request[v1.IssueResourceTransferOrderRequest]) (*connect_go.Response[v1.IssueResourceTransferOrderResponse], error)
	CancelResourceTransferOrder(context.Context, *connect_go.Request[v1.CancelResourceTransferOrderRequest]) (*connect_go.Response[v1.CancelResourceTransferOrderResponse], error)
}

// NewServiceClient constructs a client for the server.v1.Service service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &serviceClient{
		subscribeToWorld: connect_go.NewClient[emptypb.Empty, v1.World](
			httpClient,
			baseURL+ServiceSubscribeToWorldProcedure,
			opts...,
		),
		issueAttack: connect_go.NewClient[v1.IssueAttackRequest, v1.IssueAttackResponse](
			httpClient,
			baseURL+ServiceIssueAttackProcedure,
			opts...,
		),
		cancelAttack: connect_go.NewClient[v1.CancelAttackRequest, v1.CancelAttackResponse](
			httpClient,
			baseURL+ServiceCancelAttackProcedure,
			opts...,
		),
		issueBuildingUpgradeOrder: connect_go.NewClient[v1.IssueBuildingUpgradeOrderRequest, v1.IssueBuildingUpgradeOrderResponse](
			httpClient,
			baseURL+ServiceIssueBuildingUpgradeOrderProcedure,
			opts...,
		),
		cancelBuildingUpgradeOrder: connect_go.NewClient[v1.CancelBuildingUpgradeOrderRequest, v1.CancelBuildingUpgradeOrderResponse](
			httpClient,
			baseURL+ServiceCancelBuildingUpgradeOrderProcedure,
			opts...,
		),
		issueTroopTrainingOrder: connect_go.NewClient[v1.IssueTroopTrainingOrderRequest, v1.IssueTroopTrainingOrderResponse](
			httpClient,
			baseURL+ServiceIssueTroopTrainingOrderProcedure,
			opts...,
		),
		cancelTroopTrainingOrder: connect_go.NewClient[v1.CancelTroopTrainingOrderRequest, v1.CancelTroopTrainingOrderResponse](
			httpClient,
			baseURL+ServiceCancelTroopTrainingOrderProcedure,
			opts...,
		),
		issueResourceTransferOrder: connect_go.NewClient[v1.IssueResourceTransferOrderRequest, v1.IssueResourceTransferOrderResponse](
			httpClient,
			baseURL+ServiceIssueResourceTransferOrderProcedure,
			opts...,
		),
		cancelResourceTransferOrder: connect_go.NewClient[v1.CancelResourceTransferOrderRequest, v1.CancelResourceTransferOrderResponse](
			httpClient,
			baseURL+ServiceCancelResourceTransferOrderProcedure,
			opts...,
		),
	}
}

// serviceClient implements ServiceClient.
type serviceClient struct {
	subscribeToWorld            *connect_go.Client[emptypb.Empty, v1.World]
	issueAttack                 *connect_go.Client[v1.IssueAttackRequest, v1.IssueAttackResponse]
	cancelAttack                *connect_go.Client[v1.CancelAttackRequest, v1.CancelAttackResponse]
	issueBuildingUpgradeOrder   *connect_go.Client[v1.IssueBuildingUpgradeOrderRequest, v1.IssueBuildingUpgradeOrderResponse]
	cancelBuildingUpgradeOrder  *connect_go.Client[v1.CancelBuildingUpgradeOrderRequest, v1.CancelBuildingUpgradeOrderResponse]
	issueTroopTrainingOrder     *connect_go.Client[v1.IssueTroopTrainingOrderRequest, v1.IssueTroopTrainingOrderResponse]
	cancelTroopTrainingOrder    *connect_go.Client[v1.CancelTroopTrainingOrderRequest, v1.CancelTroopTrainingOrderResponse]
	issueResourceTransferOrder  *connect_go.Client[v1.IssueResourceTransferOrderRequest, v1.IssueResourceTransferOrderResponse]
	cancelResourceTransferOrder *connect_go.Client[v1.CancelResourceTransferOrderRequest, v1.CancelResourceTransferOrderResponse]
}

// SubscribeToWorld calls server.v1.Service.SubscribeToWorld.
func (c *serviceClient) SubscribeToWorld(ctx context.Context, req *connect_go.Request[emptypb.Empty]) (*connect_go.ServerStreamForClient[v1.World], error) {
	return c.subscribeToWorld.CallServerStream(ctx, req)
}

// IssueAttack calls server.v1.Service.IssueAttack.
func (c *serviceClient) IssueAttack(ctx context.Context, req *connect_go.Request[v1.IssueAttackRequest]) (*connect_go.Response[v1.IssueAttackResponse], error) {
	return c.issueAttack.CallUnary(ctx, req)
}

// CancelAttack calls server.v1.Service.CancelAttack.
func (c *serviceClient) CancelAttack(ctx context.Context, req *connect_go.Request[v1.CancelAttackRequest]) (*connect_go.Response[v1.CancelAttackResponse], error) {
	return c.cancelAttack.CallUnary(ctx, req)
}

// IssueBuildingUpgradeOrder calls server.v1.Service.IssueBuildingUpgradeOrder.
func (c *serviceClient) IssueBuildingUpgradeOrder(ctx context.Context, req *connect_go.Request[v1.IssueBuildingUpgradeOrderRequest]) (*connect_go.Response[v1.IssueBuildingUpgradeOrderResponse], error) {
	return c.issueBuildingUpgradeOrder.CallUnary(ctx, req)
}

// CancelBuildingUpgradeOrder calls server.v1.Service.CancelBuildingUpgradeOrder.
func (c *serviceClient) CancelBuildingUpgradeOrder(ctx context.Context, req *connect_go.Request[v1.CancelBuildingUpgradeOrderRequest]) (*connect_go.Response[v1.CancelBuildingUpgradeOrderResponse], error) {
	return c.cancelBuildingUpgradeOrder.CallUnary(ctx, req)
}

// IssueTroopTrainingOrder calls server.v1.Service.IssueTroopTrainingOrder.
func (c *serviceClient) IssueTroopTrainingOrder(ctx context.Context, req *connect_go.Request[v1.IssueTroopTrainingOrderRequest]) (*connect_go.Response[v1.IssueTroopTrainingOrderResponse], error) {
	return c.issueTroopTrainingOrder.CallUnary(ctx, req)
}

// CancelTroopTrainingOrder calls server.v1.Service.CancelTroopTrainingOrder.
func (c *serviceClient) CancelTroopTrainingOrder(ctx context.Context, req *connect_go.Request[v1.CancelTroopTrainingOrderRequest]) (*connect_go.Response[v1.CancelTroopTrainingOrderResponse], error) {
	return c.cancelTroopTrainingOrder.CallUnary(ctx, req)
}

// IssueResourceTransferOrder calls server.v1.Service.IssueResourceTransferOrder.
func (c *serviceClient) IssueResourceTransferOrder(ctx context.Context, req *connect_go.Request[v1.IssueResourceTransferOrderRequest]) (*connect_go.Response[v1.IssueResourceTransferOrderResponse], error) {
	return c.issueResourceTransferOrder.CallUnary(ctx, req)
}

// CancelResourceTransferOrder calls server.v1.Service.CancelResourceTransferOrder.
func (c *serviceClient) CancelResourceTransferOrder(ctx context.Context, req *connect_go.Request[v1.CancelResourceTransferOrderRequest]) (*connect_go.Response[v1.CancelResourceTransferOrderResponse], error) {
	return c.cancelResourceTransferOrder.CallUnary(ctx, req)
}

// ServiceHandler is an implementation of the server.v1.Service service.
type ServiceHandler interface {
	// WORLD
	SubscribeToWorld(context.Context, *connect_go.Request[emptypb.Empty], *connect_go.ServerStream[v1.World]) error
	IssueAttack(context.Context, *connect_go.Request[v1.IssueAttackRequest]) (*connect_go.Response[v1.IssueAttackResponse], error)
	CancelAttack(context.Context, *connect_go.Request[v1.CancelAttackRequest]) (*connect_go.Response[v1.CancelAttackResponse], error)
	// VILLAGES
	IssueBuildingUpgradeOrder(context.Context, *connect_go.Request[v1.IssueBuildingUpgradeOrderRequest]) (*connect_go.Response[v1.IssueBuildingUpgradeOrderResponse], error)
	CancelBuildingUpgradeOrder(context.Context, *connect_go.Request[v1.CancelBuildingUpgradeOrderRequest]) (*connect_go.Response[v1.CancelBuildingUpgradeOrderResponse], error)
	IssueTroopTrainingOrder(context.Context, *connect_go.Request[v1.IssueTroopTrainingOrderRequest]) (*connect_go.Response[v1.IssueTroopTrainingOrderResponse], error)
	CancelTroopTrainingOrder(context.Context, *connect_go.Request[v1.CancelTroopTrainingOrderRequest]) (*connect_go.Response[v1.CancelTroopTrainingOrderResponse], error)
	IssueResourceTransferOrder(context.Context, *connect_go.Request[v1.IssueResourceTransferOrderRequest]) (*connect_go.Response[v1.IssueResourceTransferOrderResponse], error)
	CancelResourceTransferOrder(context.Context, *connect_go.Request[v1.CancelResourceTransferOrderRequest]) (*connect_go.Response[v1.CancelResourceTransferOrderResponse], error)
}

// NewServiceHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewServiceHandler(svc ServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	serviceSubscribeToWorldHandler := connect_go.NewServerStreamHandler(
		ServiceSubscribeToWorldProcedure,
		svc.SubscribeToWorld,
		opts...,
	)
	serviceIssueAttackHandler := connect_go.NewUnaryHandler(
		ServiceIssueAttackProcedure,
		svc.IssueAttack,
		opts...,
	)
	serviceCancelAttackHandler := connect_go.NewUnaryHandler(
		ServiceCancelAttackProcedure,
		svc.CancelAttack,
		opts...,
	)
	serviceIssueBuildingUpgradeOrderHandler := connect_go.NewUnaryHandler(
		ServiceIssueBuildingUpgradeOrderProcedure,
		svc.IssueBuildingUpgradeOrder,
		opts...,
	)
	serviceCancelBuildingUpgradeOrderHandler := connect_go.NewUnaryHandler(
		ServiceCancelBuildingUpgradeOrderProcedure,
		svc.CancelBuildingUpgradeOrder,
		opts...,
	)
	serviceIssueTroopTrainingOrderHandler := connect_go.NewUnaryHandler(
		ServiceIssueTroopTrainingOrderProcedure,
		svc.IssueTroopTrainingOrder,
		opts...,
	)
	serviceCancelTroopTrainingOrderHandler := connect_go.NewUnaryHandler(
		ServiceCancelTroopTrainingOrderProcedure,
		svc.CancelTroopTrainingOrder,
		opts...,
	)
	serviceIssueResourceTransferOrderHandler := connect_go.NewUnaryHandler(
		ServiceIssueResourceTransferOrderProcedure,
		svc.IssueResourceTransferOrder,
		opts...,
	)
	serviceCancelResourceTransferOrderHandler := connect_go.NewUnaryHandler(
		ServiceCancelResourceTransferOrderProcedure,
		svc.CancelResourceTransferOrder,
		opts...,
	)
	return "/server.v1.Service/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ServiceSubscribeToWorldProcedure:
			serviceSubscribeToWorldHandler.ServeHTTP(w, r)
		case ServiceIssueAttackProcedure:
			serviceIssueAttackHandler.ServeHTTP(w, r)
		case ServiceCancelAttackProcedure:
			serviceCancelAttackHandler.ServeHTTP(w, r)
		case ServiceIssueBuildingUpgradeOrderProcedure:
			serviceIssueBuildingUpgradeOrderHandler.ServeHTTP(w, r)
		case ServiceCancelBuildingUpgradeOrderProcedure:
			serviceCancelBuildingUpgradeOrderHandler.ServeHTTP(w, r)
		case ServiceIssueTroopTrainingOrderProcedure:
			serviceIssueTroopTrainingOrderHandler.ServeHTTP(w, r)
		case ServiceCancelTroopTrainingOrderProcedure:
			serviceCancelTroopTrainingOrderHandler.ServeHTTP(w, r)
		case ServiceIssueResourceTransferOrderProcedure:
			serviceIssueResourceTransferOrderHandler.ServeHTTP(w, r)
		case ServiceCancelResourceTransferOrderProcedure:
			serviceCancelResourceTransferOrderHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedServiceHandler struct{}

func (UnimplementedServiceHandler) SubscribeToWorld(context.Context, *connect_go.Request[emptypb.Empty], *connect_go.ServerStream[v1.World]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("server.v1.Service.SubscribeToWorld is not implemented"))
}

func (UnimplementedServiceHandler) IssueAttack(context.Context, *connect_go.Request[v1.IssueAttackRequest]) (*connect_go.Response[v1.IssueAttackResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("server.v1.Service.IssueAttack is not implemented"))
}

func (UnimplementedServiceHandler) CancelAttack(context.Context, *connect_go.Request[v1.CancelAttackRequest]) (*connect_go.Response[v1.CancelAttackResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("server.v1.Service.CancelAttack is not implemented"))
}

func (UnimplementedServiceHandler) IssueBuildingUpgradeOrder(context.Context, *connect_go.Request[v1.IssueBuildingUpgradeOrderRequest]) (*connect_go.Response[v1.IssueBuildingUpgradeOrderResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("server.v1.Service.IssueBuildingUpgradeOrder is not implemented"))
}

func (UnimplementedServiceHandler) CancelBuildingUpgradeOrder(context.Context, *connect_go.Request[v1.CancelBuildingUpgradeOrderRequest]) (*connect_go.Response[v1.CancelBuildingUpgradeOrderResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("server.v1.Service.CancelBuildingUpgradeOrder is not implemented"))
}

func (UnimplementedServiceHandler) IssueTroopTrainingOrder(context.Context, *connect_go.Request[v1.IssueTroopTrainingOrderRequest]) (*connect_go.Response[v1.IssueTroopTrainingOrderResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("server.v1.Service.IssueTroopTrainingOrder is not implemented"))
}

func (UnimplementedServiceHandler) CancelTroopTrainingOrder(context.Context, *connect_go.Request[v1.CancelTroopTrainingOrderRequest]) (*connect_go.Response[v1.CancelTroopTrainingOrderResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("server.v1.Service.CancelTroopTrainingOrder is not implemented"))
}

func (UnimplementedServiceHandler) IssueResourceTransferOrder(context.Context, *connect_go.Request[v1.IssueResourceTransferOrderRequest]) (*connect_go.Response[v1.IssueResourceTransferOrderResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("server.v1.Service.IssueResourceTransferOrder is not implemented"))
}

func (UnimplementedServiceHandler) CancelResourceTransferOrder(context.Context, *connect_go.Request[v1.CancelResourceTransferOrderRequest]) (*connect_go.Response[v1.CancelResourceTransferOrderResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("server.v1.Service.CancelResourceTransferOrder is not implemented"))
}
