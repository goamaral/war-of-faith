// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: server/v1/server.proto

package serverv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
	v1 "war-of-faith/pkg/protobuf/server/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ServiceName is the fully-qualified name of the Service service.
	ServiceName = "server.v1.Service"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ServiceGetWorldProcedure is the fully-qualified name of the Service's GetWorld RPC.
	ServiceGetWorldProcedure = "/server.v1.Service/GetWorld"
	// ServiceSubscribeToWorldProcedure is the fully-qualified name of the Service's SubscribeToWorld
	// RPC.
	ServiceSubscribeToWorldProcedure = "/server.v1.Service/SubscribeToWorld"
	// ServiceIssueMovementOrderProcedure is the fully-qualified name of the Service's
	// IssueMovementOrder RPC.
	ServiceIssueMovementOrderProcedure = "/server.v1.Service/IssueMovementOrder"
	// ServiceCancelMovementOrderProcedure is the fully-qualified name of the Service's
	// CancelMovementOrder RPC.
	ServiceCancelMovementOrderProcedure = "/server.v1.Service/CancelMovementOrder"
	// ServiceIssueBuildingUpgradeOrderProcedure is the fully-qualified name of the Service's
	// IssueBuildingUpgradeOrder RPC.
	ServiceIssueBuildingUpgradeOrderProcedure = "/server.v1.Service/IssueBuildingUpgradeOrder"
	// ServiceCancelBuildingUpgradeOrderProcedure is the fully-qualified name of the Service's
	// CancelBuildingUpgradeOrder RPC.
	ServiceCancelBuildingUpgradeOrderProcedure = "/server.v1.Service/CancelBuildingUpgradeOrder"
	// ServiceIssueTrainingOrderProcedure is the fully-qualified name of the Service's
	// IssueTrainingOrder RPC.
	ServiceIssueTrainingOrderProcedure = "/server.v1.Service/IssueTrainingOrder"
	// ServiceCancelTroopTrainingOrderProcedure is the fully-qualified name of the Service's
	// CancelTroopTrainingOrder RPC.
	ServiceCancelTroopTrainingOrderProcedure = "/server.v1.Service/CancelTroopTrainingOrder"
)

// ServiceClient is a client for the server.v1.Service service.
type ServiceClient interface {
	// WORLD
	GetWorld(context.Context, *connect.Request[v1.GetWorldRequest]) (*connect.Response[v1.GetWorldResponse], error)
	SubscribeToWorld(context.Context, *connect.Request[v1.SubscribeToWorldRequest]) (*connect.ServerStreamForClient[v1.SubscribeToWorldResponse], error)
	IssueMovementOrder(context.Context, *connect.Request[v1.IssueMovementOrderRequest]) (*connect.Response[v1.IssueMovementOrderResponse], error)
	CancelMovementOrder(context.Context, *connect.Request[v1.CancelMovementOrderRequest]) (*connect.Response[v1.CancelMovementOrderResponse], error)
	// VILLAGES
	IssueBuildingUpgradeOrder(context.Context, *connect.Request[v1.IssueBuildingUpgradeOrderRequest]) (*connect.Response[v1.IssueBuildingUpgradeOrderResponse], error)
	CancelBuildingUpgradeOrder(context.Context, *connect.Request[v1.CancelBuildingUpgradeOrderRequest]) (*connect.Response[v1.CancelBuildingUpgradeOrderResponse], error)
	IssueTrainingOrder(context.Context, *connect.Request[v1.IssueTrainingOrderRequest]) (*connect.Response[v1.IssueTrainingOrderResponse], error)
	CancelTroopTrainingOrder(context.Context, *connect.Request[v1.CancelTroopTrainingOrderRequest]) (*connect.Response[v1.CancelTroopTrainingOrderResponse], error)
}

// NewServiceClient constructs a client for the server.v1.Service service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	serviceMethods := v1.File_server_v1_server_proto.Services().ByName("Service").Methods()
	return &serviceClient{
		getWorld: connect.NewClient[v1.GetWorldRequest, v1.GetWorldResponse](
			httpClient,
			baseURL+ServiceGetWorldProcedure,
			connect.WithSchema(serviceMethods.ByName("GetWorld")),
			connect.WithClientOptions(opts...),
		),
		subscribeToWorld: connect.NewClient[v1.SubscribeToWorldRequest, v1.SubscribeToWorldResponse](
			httpClient,
			baseURL+ServiceSubscribeToWorldProcedure,
			connect.WithSchema(serviceMethods.ByName("SubscribeToWorld")),
			connect.WithClientOptions(opts...),
		),
		issueMovementOrder: connect.NewClient[v1.IssueMovementOrderRequest, v1.IssueMovementOrderResponse](
			httpClient,
			baseURL+ServiceIssueMovementOrderProcedure,
			connect.WithSchema(serviceMethods.ByName("IssueMovementOrder")),
			connect.WithClientOptions(opts...),
		),
		cancelMovementOrder: connect.NewClient[v1.CancelMovementOrderRequest, v1.CancelMovementOrderResponse](
			httpClient,
			baseURL+ServiceCancelMovementOrderProcedure,
			connect.WithSchema(serviceMethods.ByName("CancelMovementOrder")),
			connect.WithClientOptions(opts...),
		),
		issueBuildingUpgradeOrder: connect.NewClient[v1.IssueBuildingUpgradeOrderRequest, v1.IssueBuildingUpgradeOrderResponse](
			httpClient,
			baseURL+ServiceIssueBuildingUpgradeOrderProcedure,
			connect.WithSchema(serviceMethods.ByName("IssueBuildingUpgradeOrder")),
			connect.WithClientOptions(opts...),
		),
		cancelBuildingUpgradeOrder: connect.NewClient[v1.CancelBuildingUpgradeOrderRequest, v1.CancelBuildingUpgradeOrderResponse](
			httpClient,
			baseURL+ServiceCancelBuildingUpgradeOrderProcedure,
			connect.WithSchema(serviceMethods.ByName("CancelBuildingUpgradeOrder")),
			connect.WithClientOptions(opts...),
		),
		issueTrainingOrder: connect.NewClient[v1.IssueTrainingOrderRequest, v1.IssueTrainingOrderResponse](
			httpClient,
			baseURL+ServiceIssueTrainingOrderProcedure,
			connect.WithSchema(serviceMethods.ByName("IssueTrainingOrder")),
			connect.WithClientOptions(opts...),
		),
		cancelTroopTrainingOrder: connect.NewClient[v1.CancelTroopTrainingOrderRequest, v1.CancelTroopTrainingOrderResponse](
			httpClient,
			baseURL+ServiceCancelTroopTrainingOrderProcedure,
			connect.WithSchema(serviceMethods.ByName("CancelTroopTrainingOrder")),
			connect.WithClientOptions(opts...),
		),
	}
}

// serviceClient implements ServiceClient.
type serviceClient struct {
	getWorld                   *connect.Client[v1.GetWorldRequest, v1.GetWorldResponse]
	subscribeToWorld           *connect.Client[v1.SubscribeToWorldRequest, v1.SubscribeToWorldResponse]
	issueMovementOrder         *connect.Client[v1.IssueMovementOrderRequest, v1.IssueMovementOrderResponse]
	cancelMovementOrder        *connect.Client[v1.CancelMovementOrderRequest, v1.CancelMovementOrderResponse]
	issueBuildingUpgradeOrder  *connect.Client[v1.IssueBuildingUpgradeOrderRequest, v1.IssueBuildingUpgradeOrderResponse]
	cancelBuildingUpgradeOrder *connect.Client[v1.CancelBuildingUpgradeOrderRequest, v1.CancelBuildingUpgradeOrderResponse]
	issueTrainingOrder         *connect.Client[v1.IssueTrainingOrderRequest, v1.IssueTrainingOrderResponse]
	cancelTroopTrainingOrder   *connect.Client[v1.CancelTroopTrainingOrderRequest, v1.CancelTroopTrainingOrderResponse]
}

// GetWorld calls server.v1.Service.GetWorld.
func (c *serviceClient) GetWorld(ctx context.Context, req *connect.Request[v1.GetWorldRequest]) (*connect.Response[v1.GetWorldResponse], error) {
	return c.getWorld.CallUnary(ctx, req)
}

// SubscribeToWorld calls server.v1.Service.SubscribeToWorld.
func (c *serviceClient) SubscribeToWorld(ctx context.Context, req *connect.Request[v1.SubscribeToWorldRequest]) (*connect.ServerStreamForClient[v1.SubscribeToWorldResponse], error) {
	return c.subscribeToWorld.CallServerStream(ctx, req)
}

// IssueMovementOrder calls server.v1.Service.IssueMovementOrder.
func (c *serviceClient) IssueMovementOrder(ctx context.Context, req *connect.Request[v1.IssueMovementOrderRequest]) (*connect.Response[v1.IssueMovementOrderResponse], error) {
	return c.issueMovementOrder.CallUnary(ctx, req)
}

// CancelMovementOrder calls server.v1.Service.CancelMovementOrder.
func (c *serviceClient) CancelMovementOrder(ctx context.Context, req *connect.Request[v1.CancelMovementOrderRequest]) (*connect.Response[v1.CancelMovementOrderResponse], error) {
	return c.cancelMovementOrder.CallUnary(ctx, req)
}

// IssueBuildingUpgradeOrder calls server.v1.Service.IssueBuildingUpgradeOrder.
func (c *serviceClient) IssueBuildingUpgradeOrder(ctx context.Context, req *connect.Request[v1.IssueBuildingUpgradeOrderRequest]) (*connect.Response[v1.IssueBuildingUpgradeOrderResponse], error) {
	return c.issueBuildingUpgradeOrder.CallUnary(ctx, req)
}

// CancelBuildingUpgradeOrder calls server.v1.Service.CancelBuildingUpgradeOrder.
func (c *serviceClient) CancelBuildingUpgradeOrder(ctx context.Context, req *connect.Request[v1.CancelBuildingUpgradeOrderRequest]) (*connect.Response[v1.CancelBuildingUpgradeOrderResponse], error) {
	return c.cancelBuildingUpgradeOrder.CallUnary(ctx, req)
}

// IssueTrainingOrder calls server.v1.Service.IssueTrainingOrder.
func (c *serviceClient) IssueTrainingOrder(ctx context.Context, req *connect.Request[v1.IssueTrainingOrderRequest]) (*connect.Response[v1.IssueTrainingOrderResponse], error) {
	return c.issueTrainingOrder.CallUnary(ctx, req)
}

// CancelTroopTrainingOrder calls server.v1.Service.CancelTroopTrainingOrder.
func (c *serviceClient) CancelTroopTrainingOrder(ctx context.Context, req *connect.Request[v1.CancelTroopTrainingOrderRequest]) (*connect.Response[v1.CancelTroopTrainingOrderResponse], error) {
	return c.cancelTroopTrainingOrder.CallUnary(ctx, req)
}

// ServiceHandler is an implementation of the server.v1.Service service.
type ServiceHandler interface {
	// WORLD
	GetWorld(context.Context, *connect.Request[v1.GetWorldRequest]) (*connect.Response[v1.GetWorldResponse], error)
	SubscribeToWorld(context.Context, *connect.Request[v1.SubscribeToWorldRequest], *connect.ServerStream[v1.SubscribeToWorldResponse]) error
	IssueMovementOrder(context.Context, *connect.Request[v1.IssueMovementOrderRequest]) (*connect.Response[v1.IssueMovementOrderResponse], error)
	CancelMovementOrder(context.Context, *connect.Request[v1.CancelMovementOrderRequest]) (*connect.Response[v1.CancelMovementOrderResponse], error)
	// VILLAGES
	IssueBuildingUpgradeOrder(context.Context, *connect.Request[v1.IssueBuildingUpgradeOrderRequest]) (*connect.Response[v1.IssueBuildingUpgradeOrderResponse], error)
	CancelBuildingUpgradeOrder(context.Context, *connect.Request[v1.CancelBuildingUpgradeOrderRequest]) (*connect.Response[v1.CancelBuildingUpgradeOrderResponse], error)
	IssueTrainingOrder(context.Context, *connect.Request[v1.IssueTrainingOrderRequest]) (*connect.Response[v1.IssueTrainingOrderResponse], error)
	CancelTroopTrainingOrder(context.Context, *connect.Request[v1.CancelTroopTrainingOrderRequest]) (*connect.Response[v1.CancelTroopTrainingOrderResponse], error)
}

// NewServiceHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewServiceHandler(svc ServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	serviceMethods := v1.File_server_v1_server_proto.Services().ByName("Service").Methods()
	serviceGetWorldHandler := connect.NewUnaryHandler(
		ServiceGetWorldProcedure,
		svc.GetWorld,
		connect.WithSchema(serviceMethods.ByName("GetWorld")),
		connect.WithHandlerOptions(opts...),
	)
	serviceSubscribeToWorldHandler := connect.NewServerStreamHandler(
		ServiceSubscribeToWorldProcedure,
		svc.SubscribeToWorld,
		connect.WithSchema(serviceMethods.ByName("SubscribeToWorld")),
		connect.WithHandlerOptions(opts...),
	)
	serviceIssueMovementOrderHandler := connect.NewUnaryHandler(
		ServiceIssueMovementOrderProcedure,
		svc.IssueMovementOrder,
		connect.WithSchema(serviceMethods.ByName("IssueMovementOrder")),
		connect.WithHandlerOptions(opts...),
	)
	serviceCancelMovementOrderHandler := connect.NewUnaryHandler(
		ServiceCancelMovementOrderProcedure,
		svc.CancelMovementOrder,
		connect.WithSchema(serviceMethods.ByName("CancelMovementOrder")),
		connect.WithHandlerOptions(opts...),
	)
	serviceIssueBuildingUpgradeOrderHandler := connect.NewUnaryHandler(
		ServiceIssueBuildingUpgradeOrderProcedure,
		svc.IssueBuildingUpgradeOrder,
		connect.WithSchema(serviceMethods.ByName("IssueBuildingUpgradeOrder")),
		connect.WithHandlerOptions(opts...),
	)
	serviceCancelBuildingUpgradeOrderHandler := connect.NewUnaryHandler(
		ServiceCancelBuildingUpgradeOrderProcedure,
		svc.CancelBuildingUpgradeOrder,
		connect.WithSchema(serviceMethods.ByName("CancelBuildingUpgradeOrder")),
		connect.WithHandlerOptions(opts...),
	)
	serviceIssueTrainingOrderHandler := connect.NewUnaryHandler(
		ServiceIssueTrainingOrderProcedure,
		svc.IssueTrainingOrder,
		connect.WithSchema(serviceMethods.ByName("IssueTrainingOrder")),
		connect.WithHandlerOptions(opts...),
	)
	serviceCancelTroopTrainingOrderHandler := connect.NewUnaryHandler(
		ServiceCancelTroopTrainingOrderProcedure,
		svc.CancelTroopTrainingOrder,
		connect.WithSchema(serviceMethods.ByName("CancelTroopTrainingOrder")),
		connect.WithHandlerOptions(opts...),
	)
	return "/server.v1.Service/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ServiceGetWorldProcedure:
			serviceGetWorldHandler.ServeHTTP(w, r)
		case ServiceSubscribeToWorldProcedure:
			serviceSubscribeToWorldHandler.ServeHTTP(w, r)
		case ServiceIssueMovementOrderProcedure:
			serviceIssueMovementOrderHandler.ServeHTTP(w, r)
		case ServiceCancelMovementOrderProcedure:
			serviceCancelMovementOrderHandler.ServeHTTP(w, r)
		case ServiceIssueBuildingUpgradeOrderProcedure:
			serviceIssueBuildingUpgradeOrderHandler.ServeHTTP(w, r)
		case ServiceCancelBuildingUpgradeOrderProcedure:
			serviceCancelBuildingUpgradeOrderHandler.ServeHTTP(w, r)
		case ServiceIssueTrainingOrderProcedure:
			serviceIssueTrainingOrderHandler.ServeHTTP(w, r)
		case ServiceCancelTroopTrainingOrderProcedure:
			serviceCancelTroopTrainingOrderHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedServiceHandler struct{}

func (UnimplementedServiceHandler) GetWorld(context.Context, *connect.Request[v1.GetWorldRequest]) (*connect.Response[v1.GetWorldResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("server.v1.Service.GetWorld is not implemented"))
}

func (UnimplementedServiceHandler) SubscribeToWorld(context.Context, *connect.Request[v1.SubscribeToWorldRequest], *connect.ServerStream[v1.SubscribeToWorldResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("server.v1.Service.SubscribeToWorld is not implemented"))
}

func (UnimplementedServiceHandler) IssueMovementOrder(context.Context, *connect.Request[v1.IssueMovementOrderRequest]) (*connect.Response[v1.IssueMovementOrderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("server.v1.Service.IssueMovementOrder is not implemented"))
}

func (UnimplementedServiceHandler) CancelMovementOrder(context.Context, *connect.Request[v1.CancelMovementOrderRequest]) (*connect.Response[v1.CancelMovementOrderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("server.v1.Service.CancelMovementOrder is not implemented"))
}

func (UnimplementedServiceHandler) IssueBuildingUpgradeOrder(context.Context, *connect.Request[v1.IssueBuildingUpgradeOrderRequest]) (*connect.Response[v1.IssueBuildingUpgradeOrderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("server.v1.Service.IssueBuildingUpgradeOrder is not implemented"))
}

func (UnimplementedServiceHandler) CancelBuildingUpgradeOrder(context.Context, *connect.Request[v1.CancelBuildingUpgradeOrderRequest]) (*connect.Response[v1.CancelBuildingUpgradeOrderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("server.v1.Service.CancelBuildingUpgradeOrder is not implemented"))
}

func (UnimplementedServiceHandler) IssueTrainingOrder(context.Context, *connect.Request[v1.IssueTrainingOrderRequest]) (*connect.Response[v1.IssueTrainingOrderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("server.v1.Service.IssueTrainingOrder is not implemented"))
}

func (UnimplementedServiceHandler) CancelTroopTrainingOrder(context.Context, *connect.Request[v1.CancelTroopTrainingOrderRequest]) (*connect.Response[v1.CancelTroopTrainingOrderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("server.v1.Service.CancelTroopTrainingOrder is not implemented"))
}
