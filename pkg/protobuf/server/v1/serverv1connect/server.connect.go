// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: server/v1/server.proto

package serverv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
	v1 "war-of-faith/pkg/protobuf/server/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ServiceName is the fully-qualified name of the Service service.
	ServiceName = "server.v1.Service"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ServiceGetWorldProcedure is the fully-qualified name of the Service's GetWorld RPC.
	ServiceGetWorldProcedure = "/server.v1.Service/GetWorld"
	// ServiceSubscribeToWorldProcedure is the fully-qualified name of the Service's SubscribeToWorld
	// RPC.
	ServiceSubscribeToWorldProcedure = "/server.v1.Service/SubscribeToWorld"
	// ServiceIssueTroopMovementOrderProcedure is the fully-qualified name of the Service's
	// IssueTroopMovementOrder RPC.
	ServiceIssueTroopMovementOrderProcedure = "/server.v1.Service/IssueTroopMovementOrder"
	// ServiceCancelTroopMovementOrderProcedure is the fully-qualified name of the Service's
	// CancelTroopMovementOrder RPC.
	ServiceCancelTroopMovementOrderProcedure = "/server.v1.Service/CancelTroopMovementOrder"
	// ServiceIssueBuildingUpgradeOrderProcedure is the fully-qualified name of the Service's
	// IssueBuildingUpgradeOrder RPC.
	ServiceIssueBuildingUpgradeOrderProcedure = "/server.v1.Service/IssueBuildingUpgradeOrder"
	// ServiceCancelBuildingUpgradeOrderProcedure is the fully-qualified name of the Service's
	// CancelBuildingUpgradeOrder RPC.
	ServiceCancelBuildingUpgradeOrderProcedure = "/server.v1.Service/CancelBuildingUpgradeOrder"
	// ServiceIssueTroopTrainingOrderProcedure is the fully-qualified name of the Service's
	// IssueTroopTrainingOrder RPC.
	ServiceIssueTroopTrainingOrderProcedure = "/server.v1.Service/IssueTroopTrainingOrder"
	// ServiceCancelTroopTrainingOrderProcedure is the fully-qualified name of the Service's
	// CancelTroopTrainingOrder RPC.
	ServiceCancelTroopTrainingOrderProcedure = "/server.v1.Service/CancelTroopTrainingOrder"
	// ServiceIssueResourceTransferOrderProcedure is the fully-qualified name of the Service's
	// IssueResourceTransferOrder RPC.
	ServiceIssueResourceTransferOrderProcedure = "/server.v1.Service/IssueResourceTransferOrder"
	// ServiceCancelResourceTransferOrderProcedure is the fully-qualified name of the Service's
	// CancelResourceTransferOrder RPC.
	ServiceCancelResourceTransferOrderProcedure = "/server.v1.Service/CancelResourceTransferOrder"
)

// ServiceClient is a client for the server.v1.Service service.
type ServiceClient interface {
	// WORLD
	GetWorld(context.Context, *connect.Request[v1.GetWorldRequest]) (*connect.Response[v1.GetWorldResponse], error)
	SubscribeToWorld(context.Context, *connect.Request[v1.SubscribeToWorldRequest]) (*connect.ServerStreamForClient[v1.SubscribeToWorldResponse], error)
	IssueTroopMovementOrder(context.Context, *connect.Request[v1.IssueTroopMovementOrderRequest]) (*connect.Response[v1.IssueTroopMovementOrderResponse], error)
	CancelTroopMovementOrder(context.Context, *connect.Request[v1.CancelTroopMovementOrderRequest]) (*connect.Response[v1.CancelTroopMovementOrderResponse], error)
	// VILLAGES
	IssueBuildingUpgradeOrder(context.Context, *connect.Request[v1.IssueBuildingUpgradeOrderRequest]) (*connect.Response[v1.IssueBuildingUpgradeOrderResponse], error)
	CancelBuildingUpgradeOrder(context.Context, *connect.Request[v1.CancelBuildingUpgradeOrderRequest]) (*connect.Response[v1.CancelBuildingUpgradeOrderResponse], error)
	IssueTroopTrainingOrder(context.Context, *connect.Request[v1.IssueTroopTrainingOrderRequest]) (*connect.Response[v1.IssueTroopTrainingOrderResponse], error)
	CancelTroopTrainingOrder(context.Context, *connect.Request[v1.CancelTroopTrainingOrderRequest]) (*connect.Response[v1.CancelTroopTrainingOrderResponse], error)
	IssueResourceTransferOrder(context.Context, *connect.Request[v1.IssueResourceTransferOrderRequest]) (*connect.Response[v1.IssueResourceTransferOrderResponse], error)
	CancelResourceTransferOrder(context.Context, *connect.Request[v1.CancelResourceTransferOrderRequest]) (*connect.Response[v1.CancelResourceTransferOrderResponse], error)
}

// NewServiceClient constructs a client for the server.v1.Service service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	serviceMethods := v1.File_server_v1_server_proto.Services().ByName("Service").Methods()
	return &serviceClient{
		getWorld: connect.NewClient[v1.GetWorldRequest, v1.GetWorldResponse](
			httpClient,
			baseURL+ServiceGetWorldProcedure,
			connect.WithSchema(serviceMethods.ByName("GetWorld")),
			connect.WithClientOptions(opts...),
		),
		subscribeToWorld: connect.NewClient[v1.SubscribeToWorldRequest, v1.SubscribeToWorldResponse](
			httpClient,
			baseURL+ServiceSubscribeToWorldProcedure,
			connect.WithSchema(serviceMethods.ByName("SubscribeToWorld")),
			connect.WithClientOptions(opts...),
		),
		issueTroopMovementOrder: connect.NewClient[v1.IssueTroopMovementOrderRequest, v1.IssueTroopMovementOrderResponse](
			httpClient,
			baseURL+ServiceIssueTroopMovementOrderProcedure,
			connect.WithSchema(serviceMethods.ByName("IssueTroopMovementOrder")),
			connect.WithClientOptions(opts...),
		),
		cancelTroopMovementOrder: connect.NewClient[v1.CancelTroopMovementOrderRequest, v1.CancelTroopMovementOrderResponse](
			httpClient,
			baseURL+ServiceCancelTroopMovementOrderProcedure,
			connect.WithSchema(serviceMethods.ByName("CancelTroopMovementOrder")),
			connect.WithClientOptions(opts...),
		),
		issueBuildingUpgradeOrder: connect.NewClient[v1.IssueBuildingUpgradeOrderRequest, v1.IssueBuildingUpgradeOrderResponse](
			httpClient,
			baseURL+ServiceIssueBuildingUpgradeOrderProcedure,
			connect.WithSchema(serviceMethods.ByName("IssueBuildingUpgradeOrder")),
			connect.WithClientOptions(opts...),
		),
		cancelBuildingUpgradeOrder: connect.NewClient[v1.CancelBuildingUpgradeOrderRequest, v1.CancelBuildingUpgradeOrderResponse](
			httpClient,
			baseURL+ServiceCancelBuildingUpgradeOrderProcedure,
			connect.WithSchema(serviceMethods.ByName("CancelBuildingUpgradeOrder")),
			connect.WithClientOptions(opts...),
		),
		issueTroopTrainingOrder: connect.NewClient[v1.IssueTroopTrainingOrderRequest, v1.IssueTroopTrainingOrderResponse](
			httpClient,
			baseURL+ServiceIssueTroopTrainingOrderProcedure,
			connect.WithSchema(serviceMethods.ByName("IssueTroopTrainingOrder")),
			connect.WithClientOptions(opts...),
		),
		cancelTroopTrainingOrder: connect.NewClient[v1.CancelTroopTrainingOrderRequest, v1.CancelTroopTrainingOrderResponse](
			httpClient,
			baseURL+ServiceCancelTroopTrainingOrderProcedure,
			connect.WithSchema(serviceMethods.ByName("CancelTroopTrainingOrder")),
			connect.WithClientOptions(opts...),
		),
		issueResourceTransferOrder: connect.NewClient[v1.IssueResourceTransferOrderRequest, v1.IssueResourceTransferOrderResponse](
			httpClient,
			baseURL+ServiceIssueResourceTransferOrderProcedure,
			connect.WithSchema(serviceMethods.ByName("IssueResourceTransferOrder")),
			connect.WithClientOptions(opts...),
		),
		cancelResourceTransferOrder: connect.NewClient[v1.CancelResourceTransferOrderRequest, v1.CancelResourceTransferOrderResponse](
			httpClient,
			baseURL+ServiceCancelResourceTransferOrderProcedure,
			connect.WithSchema(serviceMethods.ByName("CancelResourceTransferOrder")),
			connect.WithClientOptions(opts...),
		),
	}
}

// serviceClient implements ServiceClient.
type serviceClient struct {
	getWorld                    *connect.Client[v1.GetWorldRequest, v1.GetWorldResponse]
	subscribeToWorld            *connect.Client[v1.SubscribeToWorldRequest, v1.SubscribeToWorldResponse]
	issueTroopMovementOrder     *connect.Client[v1.IssueTroopMovementOrderRequest, v1.IssueTroopMovementOrderResponse]
	cancelTroopMovementOrder    *connect.Client[v1.CancelTroopMovementOrderRequest, v1.CancelTroopMovementOrderResponse]
	issueBuildingUpgradeOrder   *connect.Client[v1.IssueBuildingUpgradeOrderRequest, v1.IssueBuildingUpgradeOrderResponse]
	cancelBuildingUpgradeOrder  *connect.Client[v1.CancelBuildingUpgradeOrderRequest, v1.CancelBuildingUpgradeOrderResponse]
	issueTroopTrainingOrder     *connect.Client[v1.IssueTroopTrainingOrderRequest, v1.IssueTroopTrainingOrderResponse]
	cancelTroopTrainingOrder    *connect.Client[v1.CancelTroopTrainingOrderRequest, v1.CancelTroopTrainingOrderResponse]
	issueResourceTransferOrder  *connect.Client[v1.IssueResourceTransferOrderRequest, v1.IssueResourceTransferOrderResponse]
	cancelResourceTransferOrder *connect.Client[v1.CancelResourceTransferOrderRequest, v1.CancelResourceTransferOrderResponse]
}

// GetWorld calls server.v1.Service.GetWorld.
func (c *serviceClient) GetWorld(ctx context.Context, req *connect.Request[v1.GetWorldRequest]) (*connect.Response[v1.GetWorldResponse], error) {
	return c.getWorld.CallUnary(ctx, req)
}

// SubscribeToWorld calls server.v1.Service.SubscribeToWorld.
func (c *serviceClient) SubscribeToWorld(ctx context.Context, req *connect.Request[v1.SubscribeToWorldRequest]) (*connect.ServerStreamForClient[v1.SubscribeToWorldResponse], error) {
	return c.subscribeToWorld.CallServerStream(ctx, req)
}

// IssueTroopMovementOrder calls server.v1.Service.IssueTroopMovementOrder.
func (c *serviceClient) IssueTroopMovementOrder(ctx context.Context, req *connect.Request[v1.IssueTroopMovementOrderRequest]) (*connect.Response[v1.IssueTroopMovementOrderResponse], error) {
	return c.issueTroopMovementOrder.CallUnary(ctx, req)
}

// CancelTroopMovementOrder calls server.v1.Service.CancelTroopMovementOrder.
func (c *serviceClient) CancelTroopMovementOrder(ctx context.Context, req *connect.Request[v1.CancelTroopMovementOrderRequest]) (*connect.Response[v1.CancelTroopMovementOrderResponse], error) {
	return c.cancelTroopMovementOrder.CallUnary(ctx, req)
}

// IssueBuildingUpgradeOrder calls server.v1.Service.IssueBuildingUpgradeOrder.
func (c *serviceClient) IssueBuildingUpgradeOrder(ctx context.Context, req *connect.Request[v1.IssueBuildingUpgradeOrderRequest]) (*connect.Response[v1.IssueBuildingUpgradeOrderResponse], error) {
	return c.issueBuildingUpgradeOrder.CallUnary(ctx, req)
}

// CancelBuildingUpgradeOrder calls server.v1.Service.CancelBuildingUpgradeOrder.
func (c *serviceClient) CancelBuildingUpgradeOrder(ctx context.Context, req *connect.Request[v1.CancelBuildingUpgradeOrderRequest]) (*connect.Response[v1.CancelBuildingUpgradeOrderResponse], error) {
	return c.cancelBuildingUpgradeOrder.CallUnary(ctx, req)
}

// IssueTroopTrainingOrder calls server.v1.Service.IssueTroopTrainingOrder.
func (c *serviceClient) IssueTroopTrainingOrder(ctx context.Context, req *connect.Request[v1.IssueTroopTrainingOrderRequest]) (*connect.Response[v1.IssueTroopTrainingOrderResponse], error) {
	return c.issueTroopTrainingOrder.CallUnary(ctx, req)
}

// CancelTroopTrainingOrder calls server.v1.Service.CancelTroopTrainingOrder.
func (c *serviceClient) CancelTroopTrainingOrder(ctx context.Context, req *connect.Request[v1.CancelTroopTrainingOrderRequest]) (*connect.Response[v1.CancelTroopTrainingOrderResponse], error) {
	return c.cancelTroopTrainingOrder.CallUnary(ctx, req)
}

// IssueResourceTransferOrder calls server.v1.Service.IssueResourceTransferOrder.
func (c *serviceClient) IssueResourceTransferOrder(ctx context.Context, req *connect.Request[v1.IssueResourceTransferOrderRequest]) (*connect.Response[v1.IssueResourceTransferOrderResponse], error) {
	return c.issueResourceTransferOrder.CallUnary(ctx, req)
}

// CancelResourceTransferOrder calls server.v1.Service.CancelResourceTransferOrder.
func (c *serviceClient) CancelResourceTransferOrder(ctx context.Context, req *connect.Request[v1.CancelResourceTransferOrderRequest]) (*connect.Response[v1.CancelResourceTransferOrderResponse], error) {
	return c.cancelResourceTransferOrder.CallUnary(ctx, req)
}

// ServiceHandler is an implementation of the server.v1.Service service.
type ServiceHandler interface {
	// WORLD
	GetWorld(context.Context, *connect.Request[v1.GetWorldRequest]) (*connect.Response[v1.GetWorldResponse], error)
	SubscribeToWorld(context.Context, *connect.Request[v1.SubscribeToWorldRequest], *connect.ServerStream[v1.SubscribeToWorldResponse]) error
	IssueTroopMovementOrder(context.Context, *connect.Request[v1.IssueTroopMovementOrderRequest]) (*connect.Response[v1.IssueTroopMovementOrderResponse], error)
	CancelTroopMovementOrder(context.Context, *connect.Request[v1.CancelTroopMovementOrderRequest]) (*connect.Response[v1.CancelTroopMovementOrderResponse], error)
	// VILLAGES
	IssueBuildingUpgradeOrder(context.Context, *connect.Request[v1.IssueBuildingUpgradeOrderRequest]) (*connect.Response[v1.IssueBuildingUpgradeOrderResponse], error)
	CancelBuildingUpgradeOrder(context.Context, *connect.Request[v1.CancelBuildingUpgradeOrderRequest]) (*connect.Response[v1.CancelBuildingUpgradeOrderResponse], error)
	IssueTroopTrainingOrder(context.Context, *connect.Request[v1.IssueTroopTrainingOrderRequest]) (*connect.Response[v1.IssueTroopTrainingOrderResponse], error)
	CancelTroopTrainingOrder(context.Context, *connect.Request[v1.CancelTroopTrainingOrderRequest]) (*connect.Response[v1.CancelTroopTrainingOrderResponse], error)
	IssueResourceTransferOrder(context.Context, *connect.Request[v1.IssueResourceTransferOrderRequest]) (*connect.Response[v1.IssueResourceTransferOrderResponse], error)
	CancelResourceTransferOrder(context.Context, *connect.Request[v1.CancelResourceTransferOrderRequest]) (*connect.Response[v1.CancelResourceTransferOrderResponse], error)
}

// NewServiceHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewServiceHandler(svc ServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	serviceMethods := v1.File_server_v1_server_proto.Services().ByName("Service").Methods()
	serviceGetWorldHandler := connect.NewUnaryHandler(
		ServiceGetWorldProcedure,
		svc.GetWorld,
		connect.WithSchema(serviceMethods.ByName("GetWorld")),
		connect.WithHandlerOptions(opts...),
	)
	serviceSubscribeToWorldHandler := connect.NewServerStreamHandler(
		ServiceSubscribeToWorldProcedure,
		svc.SubscribeToWorld,
		connect.WithSchema(serviceMethods.ByName("SubscribeToWorld")),
		connect.WithHandlerOptions(opts...),
	)
	serviceIssueTroopMovementOrderHandler := connect.NewUnaryHandler(
		ServiceIssueTroopMovementOrderProcedure,
		svc.IssueTroopMovementOrder,
		connect.WithSchema(serviceMethods.ByName("IssueTroopMovementOrder")),
		connect.WithHandlerOptions(opts...),
	)
	serviceCancelTroopMovementOrderHandler := connect.NewUnaryHandler(
		ServiceCancelTroopMovementOrderProcedure,
		svc.CancelTroopMovementOrder,
		connect.WithSchema(serviceMethods.ByName("CancelTroopMovementOrder")),
		connect.WithHandlerOptions(opts...),
	)
	serviceIssueBuildingUpgradeOrderHandler := connect.NewUnaryHandler(
		ServiceIssueBuildingUpgradeOrderProcedure,
		svc.IssueBuildingUpgradeOrder,
		connect.WithSchema(serviceMethods.ByName("IssueBuildingUpgradeOrder")),
		connect.WithHandlerOptions(opts...),
	)
	serviceCancelBuildingUpgradeOrderHandler := connect.NewUnaryHandler(
		ServiceCancelBuildingUpgradeOrderProcedure,
		svc.CancelBuildingUpgradeOrder,
		connect.WithSchema(serviceMethods.ByName("CancelBuildingUpgradeOrder")),
		connect.WithHandlerOptions(opts...),
	)
	serviceIssueTroopTrainingOrderHandler := connect.NewUnaryHandler(
		ServiceIssueTroopTrainingOrderProcedure,
		svc.IssueTroopTrainingOrder,
		connect.WithSchema(serviceMethods.ByName("IssueTroopTrainingOrder")),
		connect.WithHandlerOptions(opts...),
	)
	serviceCancelTroopTrainingOrderHandler := connect.NewUnaryHandler(
		ServiceCancelTroopTrainingOrderProcedure,
		svc.CancelTroopTrainingOrder,
		connect.WithSchema(serviceMethods.ByName("CancelTroopTrainingOrder")),
		connect.WithHandlerOptions(opts...),
	)
	serviceIssueResourceTransferOrderHandler := connect.NewUnaryHandler(
		ServiceIssueResourceTransferOrderProcedure,
		svc.IssueResourceTransferOrder,
		connect.WithSchema(serviceMethods.ByName("IssueResourceTransferOrder")),
		connect.WithHandlerOptions(opts...),
	)
	serviceCancelResourceTransferOrderHandler := connect.NewUnaryHandler(
		ServiceCancelResourceTransferOrderProcedure,
		svc.CancelResourceTransferOrder,
		connect.WithSchema(serviceMethods.ByName("CancelResourceTransferOrder")),
		connect.WithHandlerOptions(opts...),
	)
	return "/server.v1.Service/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ServiceGetWorldProcedure:
			serviceGetWorldHandler.ServeHTTP(w, r)
		case ServiceSubscribeToWorldProcedure:
			serviceSubscribeToWorldHandler.ServeHTTP(w, r)
		case ServiceIssueTroopMovementOrderProcedure:
			serviceIssueTroopMovementOrderHandler.ServeHTTP(w, r)
		case ServiceCancelTroopMovementOrderProcedure:
			serviceCancelTroopMovementOrderHandler.ServeHTTP(w, r)
		case ServiceIssueBuildingUpgradeOrderProcedure:
			serviceIssueBuildingUpgradeOrderHandler.ServeHTTP(w, r)
		case ServiceCancelBuildingUpgradeOrderProcedure:
			serviceCancelBuildingUpgradeOrderHandler.ServeHTTP(w, r)
		case ServiceIssueTroopTrainingOrderProcedure:
			serviceIssueTroopTrainingOrderHandler.ServeHTTP(w, r)
		case ServiceCancelTroopTrainingOrderProcedure:
			serviceCancelTroopTrainingOrderHandler.ServeHTTP(w, r)
		case ServiceIssueResourceTransferOrderProcedure:
			serviceIssueResourceTransferOrderHandler.ServeHTTP(w, r)
		case ServiceCancelResourceTransferOrderProcedure:
			serviceCancelResourceTransferOrderHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedServiceHandler struct{}

func (UnimplementedServiceHandler) GetWorld(context.Context, *connect.Request[v1.GetWorldRequest]) (*connect.Response[v1.GetWorldResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("server.v1.Service.GetWorld is not implemented"))
}

func (UnimplementedServiceHandler) SubscribeToWorld(context.Context, *connect.Request[v1.SubscribeToWorldRequest], *connect.ServerStream[v1.SubscribeToWorldResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("server.v1.Service.SubscribeToWorld is not implemented"))
}

func (UnimplementedServiceHandler) IssueTroopMovementOrder(context.Context, *connect.Request[v1.IssueTroopMovementOrderRequest]) (*connect.Response[v1.IssueTroopMovementOrderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("server.v1.Service.IssueTroopMovementOrder is not implemented"))
}

func (UnimplementedServiceHandler) CancelTroopMovementOrder(context.Context, *connect.Request[v1.CancelTroopMovementOrderRequest]) (*connect.Response[v1.CancelTroopMovementOrderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("server.v1.Service.CancelTroopMovementOrder is not implemented"))
}

func (UnimplementedServiceHandler) IssueBuildingUpgradeOrder(context.Context, *connect.Request[v1.IssueBuildingUpgradeOrderRequest]) (*connect.Response[v1.IssueBuildingUpgradeOrderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("server.v1.Service.IssueBuildingUpgradeOrder is not implemented"))
}

func (UnimplementedServiceHandler) CancelBuildingUpgradeOrder(context.Context, *connect.Request[v1.CancelBuildingUpgradeOrderRequest]) (*connect.Response[v1.CancelBuildingUpgradeOrderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("server.v1.Service.CancelBuildingUpgradeOrder is not implemented"))
}

func (UnimplementedServiceHandler) IssueTroopTrainingOrder(context.Context, *connect.Request[v1.IssueTroopTrainingOrderRequest]) (*connect.Response[v1.IssueTroopTrainingOrderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("server.v1.Service.IssueTroopTrainingOrder is not implemented"))
}

func (UnimplementedServiceHandler) CancelTroopTrainingOrder(context.Context, *connect.Request[v1.CancelTroopTrainingOrderRequest]) (*connect.Response[v1.CancelTroopTrainingOrderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("server.v1.Service.CancelTroopTrainingOrder is not implemented"))
}

func (UnimplementedServiceHandler) IssueResourceTransferOrder(context.Context, *connect.Request[v1.IssueResourceTransferOrderRequest]) (*connect.Response[v1.IssueResourceTransferOrderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("server.v1.Service.IssueResourceTransferOrder is not implemented"))
}

func (UnimplementedServiceHandler) CancelResourceTransferOrder(context.Context, *connect.Request[v1.CancelResourceTransferOrderRequest]) (*connect.Response[v1.CancelResourceTransferOrderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("server.v1.Service.CancelResourceTransferOrder is not implemented"))
}
